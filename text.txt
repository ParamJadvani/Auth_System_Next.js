// // app/(auth)/admin/_adminFormDialog.tsx
"use client";
import { useState } from "react";
import { useForm } from "react-hook-form";
import {
    Dialog,
    DialogTrigger,
    DialogContent,
    DialogClose,
    DialogTitle,
} from "@/components/ui/dialog";
import {
    Card,
    CardHeader,
    CardContent,
    CardFooter,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
    Form,
    FormControl,
} from "@/components/ui/form";
import {
    Select,
    SelectTrigger,
    SelectValue,
    SelectContent,
    SelectItem,
} from "@/components/ui/select";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Switch } from "@/components/ui/switch";
import {
    Calendar as CalendarIcon,
    User as UserIcon,
    Mail as MailIcon,
    Globe as GlobeIcon,
    Lock as LockIcon,
} from "lucide-react";
import { ICreateAdminValues } from "@/types/admin";
import { IconInput } from "@/components/ui/icon-Input";
import { Separator } from '@/components/ui/separator';
import useAdmin from '@/hooks/use-Admin';
import { useQueryParams } from '@/hooks/use-query-params';

export function AdminFormDialog() {
    const [open, setOpen] = useState(false);

    const form = useForm<ICreateAdminValues>({
        defaultValues: {
            firstname: "",
            middlename: "",
            lastname: "",
            nationality: "",
            email: "",
            password: "",
            gender: "male",
            marital_status: "unmarried",
            blood_group: "",
            date_of_birth: "",
            date_of_joining: "",
            probation_end_date: "",
            status: "active",
            last_working_date: "",
            pf_contribution: 0,
            abry_contribution: 0,
            esi_contribution: 0,
        },
    });

    const { createAdmin } = useAdmin();
    const { applyFilters } = useQueryParams();

    const onSubmit = async (admin: ICreateAdminValues) => {
        const shouldStayOpen = await createAdmin(admin);
        setOpen(shouldStayOpen);
        if (!shouldStayOpen) {
            applyFilters({ page: "1" });
        }
    };


    return (
        <Dialog open={open} onOpenChange={setOpen}>
            <DialogTrigger asChild>
                <Button variant="default" className='bg-blue-950 hover:bg-blue-950/90 text-white'>
                    Create New Admin</Button>
            </DialogTrigger>
            <DialogContent className="w-full max-w-[95vw] sm:max-w-[90vw] lg:max-w-[80vw] xl:max-w-[1200px] max-h-[90vh] overflow-y-auto px-2 sm:px-6 py-4">
                <Card className="border-0 shadow-none">
                    <CardHeader>
                        <DialogTitle className='text-2xl'>Create New Admin</DialogTitle>
                        <Separator className='bg-gray-500/50 ' />
                    </CardHeader>
                    <Form {...form}>
                        <form onSubmit={form.handleSubmit(onSubmit)}>
                            <CardContent className="space-y-8">
                                {/* Row 1: firstName, middleName, lastName */}
                                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                                    <FormControl className='space-y-1'>
                                        <IconInput
                                            label='First Name'
                                            id="firstname"
                                            placeholder="First Name"
                                            icon={UserIcon}
                                            {...form.register("firstname")}
                                        />
                                    </FormControl>
                                    <FormControl className='space-y-1'>
                                        <IconInput
                                            label='Middle Name'
                                            id="middlename"
                                            placeholder="Middle Name"
                                            icon={UserIcon}
                                            {...form.register("middlename")}
                                        />
                                    </FormControl>
                                    <FormControl className='space-y-1'>
                                        <IconInput
                                            label='Last Name'
                                            id="lastname"
                                            placeholder="Last Name"
                                            icon={UserIcon}
                                            {...form.register("lastname")}
                                        />
                                    </FormControl>
                                </div>

                                {/* Row 2: nationality, email, password */}
                                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                                    <FormControl className='space-y-1'>
                                        <IconInput
                                            label='Nationality'
                                            id="nationality"
                                            placeholder="Nationality"
                                            icon={GlobeIcon}
                                            {...form.register("nationality")}
                                        />
                                    </FormControl>
                                    <FormControl className='space-y-1'>
                                        <IconInput
                                            label='Email'
                                            id="email"
                                            type="email"
                                            placeholder="Email"
                                            icon={MailIcon}
                                            {...form.register("email")}
                                        />
                                    </FormControl>
                                    <FormControl className='space-y-1'>
                                        <IconInput
                                            label='Password'
                                            id="password"
                                            type="password"
                                            placeholder="Password"
                                            icon={LockIcon}
                                            {...form.register("password")}
                                        />
                                    </FormControl>
                                </div>

                                {/* Row 3: gender, marital_status */}
                                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                                    <div className='space-y-1'>
                                        <label className="block text-sm font-medium">
                                            Gender <span className="text-destructive">*</span>
                                        </label>
                                        <RadioGroup
                                            value={form.watch("gender")}
                                            onValueChange={(value) => form.setValue("gender", value as ICreateAdminValues["gender"], { shouldValidate: true })}
                                            className="flex space-x-4"
                                        >
                                            <div className="flex items-center space-x-2">
                                                <RadioGroupItem value="male" id="male" />
                                                <label htmlFor="male" className="font-normal">Male</label>
                                            </div>
                                            <div className="flex items-center space-x-2">
                                                <RadioGroupItem value="female" id="female" />
                                                <label htmlFor="female" className="font-normal">Female</label>
                                            </div>
                                            <div className="flex items-center space-x-2">
                                                <RadioGroupItem value="other" id="other" />
                                                <label htmlFor="other" className="font-normal">Other</label>
                                            </div>
                                        </RadioGroup>
                                    </div>
                                    <div className='space-y-1'>
                                        <label className="block text-sm font-medium">
                                            Marital Status <span className="text-destructive">*</span>
                                        </label>
                                        <RadioGroup
                                            value={form.watch("marital_status")}
                                            onValueChange={(value) => form.setValue("marital_status", value as ICreateAdminValues["marital_status"], { shouldValidate: true })}
                                            className="flex space-x-4"
                                        >
                                            <div className="flex items-center space-x-2">
                                                <RadioGroupItem value="unmarried" id="unmarried" />
                                                <label htmlFor="unmarried" className="font-normal">Unmarried</label>
                                            </div>
                                            <div className="flex items-center space-x-2">
                                                <RadioGroupItem value="engaged" id="engaged" />
                                                <label htmlFor="engaged" className="font-normal">Engaged</label>
                                            </div>
                                            <div className="flex items-center space-x-2">
                                                <RadioGroupItem value="married" id="married" />
                                                <label htmlFor="married" className="font-normal">Married</label>
                                            </div>
                                        </RadioGroup>
                                    </div>
                                </div>

                                {/* Row 4: date_of_birth, date_of_joining, probation_end_date */}
                                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                                    <FormControl className='space-y-1'>
                                        <IconInput
                                            label='Date of Birth'
                                            id="date_of_birth"
                                            type="date"
                                            icon={CalendarIcon}
                                            {...form.register("date_of_birth")}
                                        />
                                    </FormControl>
                                    <FormControl className='space-y-1'>
                                        <IconInput
                                            label='Date of Joining'
                                            id="date_of_joining"
                                            type="date"
                                            icon={CalendarIcon}
                                            {...form.register("date_of_joining")}
                                        />
                                    </FormControl>
                                    <FormControl className='space-y-1'>
                                        <IconInput
                                            label='Probation End Date'
                                            id="probation_end_date"
                                            type="date"
                                            icon={CalendarIcon}
                                            {...form.register("probation_end_date")}
                                        />
                                    </FormControl>
                                </div>

                                {/* Row 5: blood_group, status, last_working_date */}
                                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                                    {/* Blood Group */}
                                    <div className="space-y-1">
                                        <label htmlFor="blood_group" className="block text-sm font-medium">
                                            Blood Group
                                        </label>
                                        <Select
                                            value={form.watch("blood_group") ?? ""}
                                            onValueChange={(value) =>
                                                form.setValue("blood_group", value as ICreateAdminValues["blood_group"], {
                                                    shouldValidate: true,
                                                })
                                            }
                                        >
                                            <SelectTrigger id="blood_group">
                                                <SelectValue placeholder="Select blood group" />
                                            </SelectTrigger>
                                            <SelectContent>
                                                {["a+", "a-", "b+", "b-", "ab+", "ab-", "o+", "o-"].map((bg) => (
                                                    <SelectItem key={bg} value={bg}>
                                                        {bg.toUpperCase()}
                                                    </SelectItem>
                                                ))}
                                            </SelectContent>
                                        </Select>
                                    </div>

                                    {/* Status */}
                                    <div className="space-y-1">
                                        <label htmlFor="status" className="block text-sm font-medium">
                                            Status <span className="text-destructive">*</span>
                                        </label>
                                        <Select
                                            value={form.watch("status")}
                                            onValueChange={(value) =>
                                                form.setValue("status", value as ICreateAdminValues["status"], {
                                                    shouldValidate: true,
                                                })
                                            }
                                        >
                                            <SelectTrigger id="status">
                                                <SelectValue>
                                                    {form.watch("status")}
                                                </SelectValue>
                                            </SelectTrigger>
                                            <SelectContent>
                                                <SelectItem value="active">Active</SelectItem>
                                                <SelectItem value="inactive">Inactive</SelectItem>
                                            </SelectContent>
                                        </Select>
                                    </div>

                                    {/* Last Working Date */}
                                    <FormControl>
                                        <IconInput
                                            label="Last Working Date"
                                            id="last_working_date"
                                            type="date"
                                            icon={CalendarIcon}
                                            {...form.register("last_working_date")}
                                        />
                                    </FormControl>
                                </div>

                                {/* Row 6: contributions */}
                                <div className="flex flex-wrap gap-4">
                                    {(["pf_contribution", "abry_contribution", "esi_contribution"] as const).map((name) => (
                                        <div
                                            key={name}
                                            className="flex items-center w-full sm:w-[48%] lg:w-[32%] bg-muted/30 rounded-md px-4 py-2"
                                        >
                                            <label className="capitalize mr-auto text-sm font-medium">
                                                {name.split("_")[0].toUpperCase() + " Contribution*"}
                                            </label>
                                            <Switch
                                                checked={form.watch(name) === 1}
                                                onCheckedChange={(checked) =>
                                                    form.setValue(name, checked ? 1 : 0, { shouldValidate: true })
                                                }
                                            />
                                        </div>
                                    ))}
                                </div>
                            </CardContent>
                            <CardFooter className="flex justify-end space-x-2 mt-4">
                                <DialogClose asChild>
                                    <Button type="button" variant="outline">
                                        Cancel
                                    </Button>
                                </DialogClose>
                                <Button type="submit" disabled={form.formState.isSubmitting}>
                                    {form.formState.isSubmitting ? "Saving..." : "Save"}
                                </Button>
                            </CardFooter>
                        </form>
                    </Form>
                </Card>
            </DialogContent>
        </Dialog>
    );
}

// /app/(auth)/admin/[id]/_adminEditPage.tsx
"use client";

import { useForm } from 'react-hook-form';
import {
    Card,
    CardHeader,
    CardContent,
    CardFooter,
    CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
    Form,
    FormControl,
} from "@/components/ui/form";
import {
    Select,
    SelectTrigger,
    SelectValue,
    SelectContent,
    SelectItem,
} from "@/components/ui/select";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Switch } from "@/components/ui/switch";
import {
    Calendar as CalendarIcon,
    User as UserIcon,
    Mail as MailIcon,
    Globe as GlobeIcon,
    Phone as PhoneIcon,
    MapPin as MapPinIcon,
} from "lucide-react";
import { IconInput } from "@/components/ui/icon-Input";
import { Separator } from '@/components/ui/separator';
import useAdmin from '@/hooks/use-Admin';
import { IAdminValues, IUpdateAdminValues } from '@/types/admin';
import { useRouter } from 'next/navigation';

// Preprocess dates to match input types
const processDate = (dateStr?: string | null, type: 'date' | 'month' = 'date'): string => {
    if (!dateStr) return '';
    const date = new Date(dateStr);
    return type === 'date'
        ? date.toISOString().split('T')[0] // YYYY-MM-DD
        : date.toISOString().slice(0, 7); // YYYY-MM
};

export function AdminEditForm({ data }: { data: IAdminValues }) {
    const form = useForm<IUpdateAdminValues>({
        defaultValues: {
            ...data,
            middlename: data.middlename ?? '',
            lastname: data.lastname ?? '',
            designation: data.designation ?? '',
            aadhar_card: data.aadhar_card ?? '',
            pan_card: data.pan_card ?? '',
            pf_account_no: data.pf_account_no ?? '',
            uan_no: data.uan_no ?? '',
            esi_no: data.esi_no ?? '',
            blood_group: data.blood_group ?? '',
            residential: data.address?.residential ?? '',
            city: data.address?.city ?? '',
            state: data.address?.state ?? '',
            country: data.address?.country ?? '',
            bank_name: data.bank_info?.bank_name ?? '',
            account_holder_name: data.bank_info?.account_holder_name ?? '',
            account_no: data.bank_info?.account_no ?? 0,
            branch_name: data.bank_info?.branch_name ?? '',
            ifsc_code: data.bank_info?.ifsc_code ?? '',
            account_type: data.bank_info?.account_type ?? '',
            degree: data.education_info?.degree ?? '',
            college_name: data.education_info?.college_name ?? '',
            date_of_birth: processDate(data.date_of_birth, 'date'),
            last_working_date: processDate(data.last_working_date, 'date'),
            date_of_joining: processDate(data.date_of_joining, 'date'),
            probation_end_date: processDate(data.probation_end_date, 'date'),
            start_month_year: processDate(data.education_info?.start_month_year, 'month'),
            end_month_year: processDate(data.education_info?.end_month_year, 'month'),
            pincode: data.address?.pincode ?? 0,
            home: data.contact_no?.home ?? 0,
            personal: data.contact_no?.personal ?? 0,
        },
    });
    const router = useRouter();

    const { updateAdmin } = useAdmin();

    const onSubmit = async (formData: IUpdateAdminValues) => {

        await updateAdmin(data.id, formData);
    };

    return (
        <Card className="border-0 shadow-none bg-white">
            <Form {...form}>
                <form onSubmit={form.handleSubmit(onSubmit)}>
                    {/* Basic Details */}
                    <CardHeader>
                        <CardTitle className="text-xl">Basic Details</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-8">
                        {/* Row 1: firstName, middleName, lastName */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="First Name"
                                    id="firstname"
                                    placeholder="First Name"
                                    icon={UserIcon}
                                    {...form.register("firstname")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Middle Name"
                                    id="middlename"
                                    placeholder="Middle Name"
                                    icon={UserIcon}
                                    {...form.register("middlename")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Last Name"
                                    id="lastname"
                                    placeholder="Last Name"
                                    icon={UserIcon}
                                    {...form.register("lastname")}
                                />
                            </FormControl>
                        </div>
                        {/* Row 2: email, status, gender */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Email"
                                    id="email"
                                    type="email"
                                    placeholder="Email"
                                    icon={MailIcon}
                                    {...form.register("email")}
                                />
                            </FormControl>
                            <div className="space-y-1">
                                <label htmlFor="status" className="block text-sm font-medium">
                                    Status <span className="text-destructive">*</span>
                                </label>
                                <Select
                                    value={form.watch("status")}
                                    onValueChange={(value) =>
                                        form.setValue("status", value as IAdminValues["status"], {
                                            shouldValidate: true,
                                        })
                                    }
                                >
                                    <SelectTrigger id="status">
                                        <SelectValue>{form.watch("status")}</SelectValue>
                                    </SelectTrigger>
                                    <SelectContent>
                                        <SelectItem value="active">Active</SelectItem>
                                        <SelectItem value="inactive">Inactive</SelectItem>
                                    </SelectContent>
                                </Select>
                            </div>
                            <div className="space-y-1">
                                <label className="block text-sm font-medium">
                                    Gender <span className="text-destructive">*</span>
                                </label>
                                <RadioGroup
                                    value={form.watch("gender")}
                                    onValueChange={(value) =>
                                        form.setValue("gender", value as IAdminValues["gender"], {
                                            shouldValidate: true,
                                        })
                                    }
                                    className="flex space-x-4"
                                >
                                    <div className="flex items-center space-x-2">
                                        <RadioGroupItem value="male" id="male" />
                                        <label htmlFor="male" className="font-normal">Male</label>
                                    </div>
                                    <div className="flex items-center space-x-2">
                                        <RadioGroupItem value="female" id="female" />
                                        <label htmlFor="female" className="font-normal">Female</label>
                                    </div>
                                    <div className="flex items-center space-x-2">
                                        <RadioGroupItem value="other" id="other" />
                                        <label htmlFor="other" className="font-normal">Other</label>
                                    </div>
                                </RadioGroup>
                            </div>
                        </div>
                        {/* Row 3: marital_status, DOB, DOJ */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                            <div className="space-y-1">
                                <label className="block text-sm font-medium">
                                    Marital Status <span className="text-destructive">*</span>
                                </label>
                                <RadioGroup
                                    value={form.watch("marital_status")}
                                    onValueChange={(value) =>
                                        form.setValue("marital_status", value as IAdminValues["marital_status"], {
                                            shouldValidate: true,
                                        })
                                    }
                                    className="flex space-x-4"
                                >
                                    <div className="flex items-center space-x-2">
                                        <RadioGroupItem value="unmarried" id="unmarried" />
                                        <label htmlFor="unmarried" className="font-normal">Unmarried</label>
                                    </div>
                                    <div className="flex items-center space-x-2">
                                        <RadioGroupItem value="engaged" id="engaged" />
                                        <label htmlFor="engaged" className="font-normal">Engaged</label>
                                    </div>
                                    <div className="flex items-center space-x-2">
                                        <RadioGroupItem value="married" id="married" />
                                        <label htmlFor="married" className="font-normal">Married</label>
                                    </div>
                                </RadioGroup>
                            </div>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Date of Birth"
                                    id="date_of_birth"
                                    type="date"
                                    icon={CalendarIcon}
                                    {...form.register("date_of_birth")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Date of Joining"
                                    id="date_of_joining"
                                    type="date"
                                    icon={CalendarIcon}
                                    {...form.register("date_of_joining")}
                                />
                            </FormControl>
                        </div>
                        {/* Row 4: last_working_date, probation_end_date, nationality */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Last Working Date"
                                    id="last_working_date"
                                    type="date"
                                    icon={CalendarIcon}
                                    {...form.register("last_working_date")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Probation End Date"
                                    id="probation_end_date"
                                    type="date"
                                    icon={CalendarIcon}
                                    {...form.register("probation_end_date")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Nationality"
                                    id="nationality"
                                    placeholder="Nationality"
                                    icon={GlobeIcon}
                                    {...form.register("nationality")}
                                />
                            </FormControl>
                        </div>
                        {/* Row 5: blood_group */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                            <div className="space-y-1">
                                <label htmlFor="blood_group" className="block text-sm font-medium">
                                    Blood Group
                                </label>
                                <Select
                                    value={form.watch("blood_group") ?? ""}
                                    onValueChange={(value) =>
                                        form.setValue("blood_group", value as IAdminValues["blood_group"], {
                                            shouldValidate: true,
                                        })
                                    }
                                >
                                    <SelectTrigger id="blood_group">
                                        <SelectValue placeholder="Select blood group" />
                                    </SelectTrigger>
                                    <SelectContent>
                                        {["a+", "a-", "b+", "b-", "ab+", "ab-", "o+", "o-"].map((bg) => (
                                            <SelectItem key={bg} value={bg}>
                                                {bg.toUpperCase()}
                                            </SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                            </div>
                        </div>
                        {/* Row 6: contributions */}
                        <div className="flex flex-wrap gap-4">
                            {(["pf_contribution", "abry_contribution", "esi_contribution"] as const).map((name) => (
                                <div
                                    key={name}
                                    className="flex items-center w-full sm:w-[48%] lg:w-[32%] bg-muted/30 rounded-md px-4 py-2"
                                >
                                    <label className="capitalize mr-auto text-sm font-medium">
                                        {name.split("_")[0].toUpperCase()} Contribution*
                                    </label>
                                    <Switch
                                        checked={form.watch(name) === 1}
                                        onCheckedChange={(checked) =>
                                            form.setValue(name, checked ? 1 : 0, { shouldValidate: true })
                                        }
                                    />
                                </div>
                            ))}
                        </div>
                    </CardContent>
                    <Separator className="bg-gray-300/50 my-4 !w-[80vw] max-w-[80vw] mx-auto" />

                    {/* Contact Details */}
                    <CardHeader>
                        <CardTitle className="text-xl">Contact Details</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-8">
                        {/* Row 1: Residential Address, city, state */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Residential Address"
                                    id="residential"
                                    placeholder="Residential Address"
                                    icon={MapPinIcon}
                                    {...form.register("residential")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="City"
                                    id="city"
                                    placeholder="City"
                                    icon={GlobeIcon}
                                    {...form.register("city")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="State"
                                    id="state"
                                    placeholder="State"
                                    icon={MapPinIcon}
                                    {...form.register("state")}
                                />
                            </FormControl>
                        </div>
                        {/* Row 2: country, pincode, contact_no */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Country"
                                    id="country"
                                    placeholder="Country"
                                    icon={GlobeIcon}
                                    {...form.register("country")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Pincode"
                                    id="pincode"
                                    placeholder="Pincode"
                                    type="number"
                                    icon={MapPinIcon}
                                    {...form.register("pincode")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Contact Number"
                                    id="personal"
                                    placeholder="Contact Number"
                                    type="number"
                                    icon={PhoneIcon}
                                    {...form.register("personal")}
                                />
                            </FormControl>
                        </div>
                        {/* Row 3: home */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Home Contact No"
                                    id="home"
                                    placeholder="Home Contact Number"
                                    type="number"
                                    icon={PhoneIcon}
                                    {...form.register("home")}
                                />
                            </FormControl>
                        </div>
                    </CardContent>
                    <Separator className="bg-gray-300/50 my-4 !w-[80vw] max-w-[80vw] mx-auto" />

                    {/* Bank Details */}
                    <CardHeader>
                        <CardTitle className="text-xl">Bank Details</CardTitle>

                    </CardHeader>
                    <CardContent className="space-y-8">
                        {/* Row 1: bank_name, account_holder_name, account_no */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Bank Name"
                                    id="bank_name"
                                    placeholder="Bank Name"
                                    icon={GlobeIcon}
                                    {...form.register("bank_name")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Account Holder Name"
                                    id="account_holder_name"
                                    placeholder="Account Holder Name"
                                    icon={UserIcon}
                                    {...form.register("account_holder_name")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Account Number"
                                    id="account_no"
                                    placeholder="Account Number"
                                    type="number"
                                    icon={GlobeIcon}
                                    {...form.register("account_no")}
                                />
                            </FormControl>
                        </div>
                        {/* Row 2: branch_name, ifsc_code, account_type */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Branch Name"
                                    id="branch_name"
                                    placeholder="Branch Name"
                                    icon={MapPinIcon}
                                    {...form.register("branch_name")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="IFSC Code"
                                    id="ifsc_code"
                                    placeholder="IFSC Code"
                                    icon={GlobeIcon}
                                    {...form.register("ifsc_code")}
                                />
                            </FormControl>
                            <div className="space-y-1">
                                <label htmlFor="account_type" className="block text-sm font-medium">
                                    Account Type
                                </label>
                                <Select
                                    value={form.watch("account_type")?.toString() ?? "none"}
                                    onValueChange={(value) => {
                                        const num = value === "none" ? "" : value;
                                        form.setValue("account_type", num, {
                                            shouldValidate: true,
                                        });
                                    }}
                                >
                                    <SelectTrigger id="hold_percentage" className='w-full'>
                                        <SelectValue placeholder="Select Account Type" />
                                    </SelectTrigger>
                                    <SelectContent>
                                        <SelectItem value="none">Select Hold Percentage</SelectItem>
                                        {["saving", "current", "salary"].map((pct) => (
                                            <SelectItem key={pct} value={pct}>
                                                {pct[0].toUpperCase() + pct.slice(1)}
                                            </SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                            </div>
                        </div>
                    </CardContent>
                    <Separator className="bg-gray-300/50 my-4 !w-[80vw] max-w-[80vw] mx-auto" />

                    {/* Document Details */}
                    <CardHeader>
                        <CardTitle className="text-xl">Document Details</CardTitle>

                    </CardHeader>
                    <CardContent className="space-y-8">
                        {/* Row 1: aadhar_card, pan_card */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Aadhar Card Number"
                                    id="aadhar_card"
                                    placeholder="Aadhar Card Number"
                                    icon={GlobeIcon}
                                    {...form.register("aadhar_card")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="PAN Card Number"
                                    id="pan_card"
                                    placeholder="PAN Card Number"
                                    icon={UserIcon}
                                    {...form.register("pan_card")}
                                />
                            </FormControl>
                        </div>
                    </CardContent>
                    <Separator className="bg-gray-300/50 my-4 !w-[80vw] max-w-[80vw] mx-auto" />

                    {/* Education Details */}
                    <CardHeader>
                        <CardTitle className="text-xl">Education Details</CardTitle>

                    </CardHeader>
                    <CardContent className="space-y-8">
                        {/* Row 1: degree, college_name, designation */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Degree"
                                    id="degree"
                                    placeholder="Degree"
                                    icon={GlobeIcon}
                                    {...form.register("degree")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="College/University"
                                    id="college_name"
                                    placeholder="College/University"
                                    icon={GlobeIcon}
                                    {...form.register("college_name")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Designation"
                                    id="designation"
                                    placeholder="Designation"
                                    icon={UserIcon}
                                    {...form.register("designation")}
                                />
                            </FormControl>
                        </div>
                        {/* Row 2: start_month_year, end_month_year */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Start Month/Year"
                                    id="start_month_year"
                                    type="month"
                                    icon={CalendarIcon}
                                    {...form.register("start_month_year")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="End Month/Year"
                                    id="end_month_year"
                                    type="month"
                                    icon={CalendarIcon}
                                    {...form.register("end_month_year")}
                                />
                            </FormControl>
                        </div>
                    </CardContent>
                    <Separator className="bg-gray-300/50 my-4 !w-[80vw] max-w-[80vw] mx-auto" />

                    {/* PF A/C, UAN & ESI Details */}
                    <CardHeader>
                        <CardTitle className="text-xl">PF A/C, UAN & ESI Details</CardTitle>

                    </CardHeader>
                    <CardContent className="space-y-8">
                        {/* Row 1: pf_account_no, uan_no, esi_no */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="PF Account Number"
                                    id="pf_account_no"
                                    placeholder="PF Account Number"
                                    icon={GlobeIcon}
                                    {...form.register("pf_account_no")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="UAN Number"
                                    id="uan_no"
                                    placeholder="UAN Number"
                                    icon={GlobeIcon}
                                    {...form.register("uan_no")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="ESI Number"
                                    id="esi_no"
                                    placeholder="ESI Number"
                                    icon={GlobeIcon}
                                    {...form.register("esi_no")}
                                />
                            </FormControl>
                        </div>
                    </CardContent>
                    <Separator className="bg-gray-300/50 my-4 !w-[80vw] max-w-[80vw] mx-auto" />

                    <CardFooter className="flex justify-end space-x-2 mt-4 sticky bottom-10 z-50">
                        <Button type="button" variant="outline" onClick={() => router.back()}>
                            Cancel
                        </Button>
                        <Button type="submit" disabled={form.formState.isSubmitting}>
                            {form.formState.isSubmitting ? "Saving..." : "Save"}
                        </Button>
                    </CardFooter>
                </form>
            </Form>
        </Card>
    );
}

// /app/(auth)/admin/[id]/page.tsx
"use client"


import { AdminEditForm } from '@/app/(auth)/admin/[id]/_adminEditPage';
import useAdmin from '@/hooks/use-Admin';
import { IAdminValues } from '@/types/admin';
import { useParams } from 'next/navigation';
import { useEffect, useState } from 'react';


export default function AdminEditPage() {
    const params = useParams();
    const [data, setData] = useState<IAdminValues | null>(null);
    const { getAdminDetails } = useAdmin();

    useEffect(() => {
        const fetchData = async () => {
            try {
                const data = await getAdminDetails(Number(params.id));
                setData(data);
            } catch { }
        };
        fetchData();
    }, [])

    return <div>
        {data && <AdminEditForm data={data} />}
    </div>;
}

// /app/(auth)/admin/page.tsx
"use client";

import { useState, useEffect, useCallback, useRef } from "react";
import { Button } from "@/components/ui/button";
import {
    Select,
    SelectTrigger,
    SelectValue,
    SelectContent,
    SelectItem,
} from "@/components/ui/select";
import { useSearchParams } from "next/navigation";
import useAdmin from "@/hooks/use-Admin";
import { AdminsResponse } from "@/types/admin";
import { AdminFormDialog } from "@/app/(auth)/admin/_adminFormDialog";
import { AdminTable } from "@/components/admin/table";
import { IconInput } from "@/components/ui/icon-Input";
import { Pagination } from "@/components/ui/pagination";
import { useQueryParams } from "@/hooks/use-query-params";
import { Search } from "@/components/search/Search";
import { Label } from '@radix-ui/react-label';

const filterConfigs = [
    { key: "date_of_joining", label: "Date of Joining", type: "date" },
    { key: "last_working_date", label: "Last Working Date", type: "date" },
    {
        key: "status",
        label: "Status",
        type: "select",
        options: ["all", "active", "inactive"],
    },
];

export default function AdminPage() {
    const [data, setData] = useState<AdminsResponse | null>(null);
    const [loading, setLoading] = useState(true);
    const prevParamsRef = useRef<string>("");
    const isInitialRender = useRef(true);

    const { deleteAdmin, getAdmins } = useAdmin();
    const { getAllParams, applyFilters, resetAll } = useQueryParams();
    const searchParams = useSearchParams();

    const getParamsObject = useCallback(
        () =>
            Object.fromEntries(
                getAllParams().map(({ key, value }) => [key, value || ""])
            ),
        [getAllParams]
    );

    const fetchAdmins = useCallback(async () => {
        const params = getParamsObject();
        const paramString = new URLSearchParams(params).toString();

        if (isInitialRender.current || paramString !== prevParamsRef.current) {
            setLoading(true);
            const res = await getAdmins(params);
            if (res) {
                setData(res);
                if (res.meta.current_page !== Number(params.page || 1) && res.meta.total > 0) {
                    applyFilters({ page: res.meta.current_page.toString() });
                }
            }
            prevParamsRef.current = paramString;
            setLoading(false);
            isInitialRender.current = false;
        } else {
            setLoading(false);
        }
    }, [getParamsObject, getAdmins, applyFilters]);

    useEffect(() => {
        fetchAdmins();
    }, [searchParams, fetchAdmins]);

    const applyFilter = useCallback(
        (key: string, value: string | null) => {
            applyFilters({ [key]: value === "all" ? null : value, page: "1" });
        },
        [applyFilters]
    );

    const handleDelete = async (id: number) => {
        await deleteAdmin(id);
        fetchAdmins();
    };

    const params = getParamsObject();

    return (
        <div className="space-y-6">
            <div className="grid grid-cols-1 gap-4 md:grid-cols-5">
                {filterConfigs.map(({ key, label, type, options }) =>
                    type === "date" ? (
                        <IconInput
                            key={key}
                            label={label}
                            id={key}
                            type="date"
                            className="w-full rounded-md border-gray-300 focus:ring-blue-500"
                            value={params[key] || ""}
                            onChange={(e) => applyFilter(key, e.target.value || null)}
                        />
                    ) : (
                        <div key={key}>
                            <Label
                                htmlFor={key}
                                className="mb-1 block text-sm font-medium text-gray-700"
                            >
                                {label}
                            </Label>
                            <Select
                                value={params[key] || "all"}
                                onValueChange={(value) => applyFilter(key, value)}
                            >
                                <SelectTrigger id={key} className="w-full rounded-md border-gray-300">
                                    <SelectValue placeholder={`Filter by ${label.toLowerCase()}`} />
                                </SelectTrigger>
                                <SelectContent>
                                    {options!.map((option) => (
                                        <SelectItem key={option} value={option}>
                                            {option.toUpperCase()}
                                        </SelectItem>
                                    ))}
                                </SelectContent>
                            </Select>
                        </div>
                    )
                )}
                <Search />
                <div className="mt-4 flex items-center justify-between">
                    <Button
                        type="button"
                        variant="outline"
                        onClick={() => resetAll()}
                        className="w-full md:w-auto rounded-md border-blue-500 text-blue-500 hover:bg-blue-50 ml-10"
                    >
                        Reset Filters
                    </Button>
                    <AdminFormDialog />
                </div>
            </div>
            <main>
                <AdminTable
                    data={data}
                    onDelete={handleDelete}
                    loading={loading}
                />
            </main>
            <Pagination
                data={data?.meta}
                currentPage={Number(params.page) || 1}
                onPageChange={(newPage) => applyFilters({ page: newPage.toString() })}
                onLimitChange={(limit) => applyFilters({ limit, page: "1" })}
            />
        </div>
    );
}