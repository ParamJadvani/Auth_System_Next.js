'use client';

import { useState, useEffect, useRef, useCallback } from 'react';
import { useForm } from 'react-hook-form';
import { useDebounce } from 'use-debounce';
import { Button } from '@/components/ui/button';
import {
    Select,
    SelectTrigger,
    SelectValue,
    SelectContent,
    SelectItem,
} from '@/components/ui/select';
import useAdmin from '@/hooks/use-Admin';
import { AdminsResponse, ICreateAdminValues, Meta } from '@/types/admin';
import { AdminFormDialog } from '@/app/(auth)/admin/_adminFormDialog';
import { AdminTable } from '@/components/admin/table';
import { IconInput } from '@/components/ui/iconInput';
import { Pagination } from '@/components/ui/pagination';
import { useQueryParams } from '@/hooks/use-query-params';

type FilterForm = {
    status: string;
    filter: string;
    date_of_joining: string;
    last_working_date: string;
    sort_column: string;
    sort_order: 'asc' | 'desc';
    limit: number;
};

export default function AdminPage() {
    const [data, setData] = useState<AdminsResponse | null>(null);
    const [openDialog, setOpenDialog] = useState(false);
    const [loading, setLoading] = useState(true);
    const pageRef = useRef(1);

    const { deleteAdmin, createAdmin, getAdmins } = useAdmin();
    const { getParams, setParams, removeParams } = useQueryParams();

    const filterForm = useForm<FilterForm>({
        defaultValues: {
            status: '',
            filter: '',
            date_of_joining: '',
            last_working_date: '',
            sort_column: 'employee_id',
            sort_order: 'desc',
            limit: 10,
        },
    });

    const [debouncedSearch] = useDebounce(filterForm.watch('filter'), 500);

    const fetchAdmins = useCallback(async (override = {}) => {
        setLoading(true);
        const filters = { ...filterForm.getValues(), ...override, page: pageRef.current };
        const res = await getAdmins(filters);
        setData(res);
        setLoading(false);
    }, [getAdmins, filterForm]);

    const handleFilterSubmit = filterForm.handleSubmit((data) => {
        pageRef.current = 1;
        fetchAdmins({ ...data, page: 1 });
    });

    const handleReset = () => {
        filterForm.reset();
        pageRef.current = 1;
        fetchAdmins({ page: 1 });
        removeParams("s")
    };

    const handleSort = (key: string, order: 'asc' | 'desc') => {
        filterForm.setValue('sort_column', key);
        filterForm.setValue('sort_order', order);
        fetchAdmins({ sort_column: key, sort_order: order });
    };

    const handleDelete = async (id: number) => {
        await deleteAdmin(id);
        fetchAdmins();
    };

    const handleCreate = async (admin: ICreateAdminValues) => {
        const shouldStayOpen = await createAdmin(admin);
        setOpenDialog(shouldStayOpen);
        if (!shouldStayOpen) handleReset();
    };

    useEffect(() => {
        if (debouncedSearch == undefined) return;
        pageRef.current = 1;
        setParams('s', debouncedSearch);
        fetchAdmins({ filter: debouncedSearch, page: 1 });
    }, [debouncedSearch, setParams, fetchAdmins]);

    useEffect(() => {
        const initialSearch = getParams('s') || '';
        filterForm.setValue('filter', initialSearch);
        pageRef.current = 1;
        fetchAdmins({ filter: initialSearch, page: 1 });
    }, [fetchAdmins, getParams, filterForm]);

    return (
        <div className="space-y-6 p-4">
            <AdminFormDialog onSubmit={handleCreate} open={openDialog} setOpen={setOpenDialog} />

            <div className="grid grid-cols-1 gap-4 md:grid-cols-5">
                <IconInput
                    label="Date of Joining"
                    id="date_of_joining"
                    type="date"
                    className="w-full"
                    {...filterForm.register('date_of_joining')}
                    onChange={(e) => {
                        filterForm.setValue('date_of_joining', e.target.value, { shouldDirty: true });
                        fetchAdmins({ date_of_joining: e.target.value, page: 1 });
                        pageRef.current = 1;
                    }}
                />
                <IconInput
                    label="Last Working Date"
                    id="last_working_date"
                    type="date"
                    className="w-full"
                    {...filterForm.register('last_working_date')}
                    onChange={(e) => {
                        filterForm.setValue('last_working_date', e.target.value, { shouldDirty: true });
                        fetchAdmins({ last_working_date: e.target.value, page: 1 });
                        pageRef.current = 1;
                    }}
                />
                <div>
                    <label htmlFor="status" className="text-sm font-medium mb-1 block">Status</label>
                    <Select
                        value={filterForm.watch('status') || 'all'}
                        onValueChange={(value) => {
                            const status = value === 'all' ? '' : value;
                            filterForm.setValue('status', status, { shouldDirty: true });
                            fetchAdmins({ status, page: 1 });
                            pageRef.current = 1;
                        }}
                    >
                        <SelectTrigger id="status" className="w-full">
                            <SelectValue placeholder="Filter by status" />
                        </SelectTrigger>
                        <SelectContent>
                            {['all', 'active', 'inactive'].map((status) => (
                                <SelectItem key={status} value={status}>
                                    {status.toUpperCase()}
                                </SelectItem>
                            ))}
                        </SelectContent>
                    </Select>
                </div>
                <IconInput
                    label="Search"
                    id="search"
                    placeholder="Search"
                    className="w-full"
                    {...filterForm.register('filter')}
                />
                <div className="mt-4 flex justify-between items-center">
                    <Button type="button" variant="outline" onClick={handleReset} className="w-full md:w-auto">
                        Reset Filters
                    </Button>
                </div>
            </div>

            <main className="flex-1">
                <AdminTable
                    data={data}
                    loading={loading}
                    onClick={handleSort}
                    sort_column={filterForm.watch('sort_column')}
                    sort_order={filterForm.watch('sort_order')}
                    deleteAdmin={handleDelete}
                />
            </main>

            <Pagination
                data={data?.meta as Meta}
                currentPage={pageRef.current}
                onPageChange={(newPage) => {
                    pageRef.current = newPage;
                    fetchAdmins({ page: newPage });
                }}
                onLimitChange={(limit) => {
                    filterForm.setValue('limit', Number(limit));
                    handleFilterSubmit();
                }}
            />
        </div>
    );
}

'use client';

import { useState, useEffect, useRef, useCallback } from 'react';
import { useForm } from 'react-hook-form';
import { useDebounce } from 'use-debounce';
import { Button } from '@/components/ui/button';
import {
    Select,
    SelectTrigger,
    SelectValue,
    SelectContent,
    SelectItem,
} from '@/components/ui/select';
import useEmployees from '@/hooks/use-employees';
import { EmployeesResponse, ICreateEmployeeValues } from '@/types/employees';
import { EmployeeFormDialog } from '@/app/(auth)/employees/_EmployeeFormDialog';
import { EmployeeTable } from '@/components/employee/table';
import { IconInput } from '@/components/ui/iconInput';
import { Pagination } from '@/components/ui/pagination';
import { Meta } from '@/types/admin';
import { useQueryParams } from '@/hooks/use-query-params';

type FilterForm = {
    status: string;
    filter: string;
    date_of_joining: string;
    from_date_of_joining: string;
    to_date_of_joining: string;
    last_working_month: string;   // YYYY-MM for the input
    next_increment_month: string; // YYYY-MM for the input
    designation: string;
    sort_column: string;
    sort_order: 'asc' | 'desc';
    limit: number;
};

export default function EmployeePage() {
    const [data, setData] = useState<EmployeesResponse | null>(null);
    const [openDialog, setOpenDialog] = useState(false);
    const [loading, setLoading] = useState(true);
    const pageRef = useRef(1);

    const { deleteEmployee, createEmployee, getEmployee, getEmployeeLoginURL } =
        useEmployees();
    const { getParams, setParams, removeParams } = useQueryParams();

    const form = useForm<FilterForm>({
        defaultValues: {
            status: 'all',
            filter: '',
            date_of_joining: '',
            from_date_of_joining: '',
            to_date_of_joining: '',
            last_working_month: '',
            next_increment_month: '',
            designation: '',
            sort_column: 'employee_id',
            sort_order: 'desc',
            limit: 10,
        },
    });

    const [debouncedSearch] = useDebounce(form.watch('filter'), 500);

    const formatMonth = (raw: string) => {
        const [year, month] = raw.split('-');
        return month && year ? `${month}-${year}` : '';
    };

    const fetchEmployees = useCallback(
        async (overrides: Partial<FilterForm & { page: number }> = {}) => {
            setLoading(true);

            // start with all current form values
            const filters: Partial<FilterForm & { page: number }> = {
                ...form.getValues(),
                ...overrides,
            };

            // API wants empty string instead of 'all'
            if (filters.status === 'all') filters.status = '';

            // convert any month fields in overrides
            if (overrides.last_working_month) {
                filters.last_working_month = formatMonth(overrides.last_working_month);
            }
            if (overrides.next_increment_month) {
                filters.next_increment_month = formatMonth(overrides.next_increment_month);
            }

            filters.page = overrides.page ?? pageRef.current;

            const res = await getEmployee(filters);
            setData(res);
            setLoading(false);
        },
        [form, getEmployee]
    );

    const resetAll = () => {
        form.reset({
            status: 'all',
            filter: '',
            date_of_joining: '',
            from_date_of_joining: '',
            to_date_of_joining: '',
            last_working_month: '',
            next_increment_month: '',
            designation: '',
            sort_column: 'employee_id',
            sort_order: 'desc',
            limit: 10,
        });
        pageRef.current = 1;
        removeParams('s');
        fetchEmployees({ page: 1 });
    };

    const handleSort = (col: string, order: 'asc' | 'desc') => {
        form.setValue('sort_column', col);
        form.setValue('sort_order', order);
        fetchEmployees({ sort_column: col, sort_order: order });
    };

    const handleDelete = async (id: number) => {
        await deleteEmployee(id);
        fetchEmployees();
    };

    const handleCreate = async (vals: ICreateEmployeeValues) => {
        const stayOpen = await createEmployee(vals);
        setOpenDialog(stayOpen);
        if (!stayOpen) resetAll();
    };

    useEffect(() => {
        if (debouncedSearch === undefined) return;
        pageRef.current = 1;
        setParams('s', debouncedSearch);
        fetchEmployees({ filter: debouncedSearch, page: 1 });
    }, [debouncedSearch, setParams, fetchEmployees]);

    useEffect(() => {
        const initial = getParams('s') || '';
        form.setValue('filter', initial);
        pageRef.current = 1;
        fetchEmployees({ filter: initial, page: 1 });
    }, [form, fetchEmployees, getParams]);

    return (
        <div className="space-y-6 p-4">
            <EmployeeFormDialog
                onSubmit={handleCreate}
                open={openDialog}
                setOpen={setOpenDialog}
            />

            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                {[
                    { label: 'Date of Joining', id: 'date_of_joining', type: 'date' },
                    { label: 'From DOJoining', id: 'from_date_of_joining', type: 'date' },
                    { label: 'To DOJoining', id: 'to_date_of_joining', type: 'date' },
                    { label: 'Last Working Month', id: 'last_working_month', type: 'month' },
                    { label: 'Next Increment Month', id: 'next_increment_month', type: 'month' },
                ].map(({ label, id, type }) => (
                    <IconInput
                        key={id}
                        label={label}
                        id={id}
                        type={type}
                        className="w-full"
                        {...form.register(id as keyof FilterForm)}
                        value={form.watch(id as keyof FilterForm)}
                        onChange={(e) => {
                            const raw = e.target.value;
                            form.setValue(id as keyof FilterForm, raw);
                            pageRef.current = 1;
                            fetchEmployees({ [id]: raw, page: 1 });
                        }}
                    />
                ))}

                <div className="space-y-1">
                    <label htmlFor="status" className="text-sm font-medium">
                        Status
                    </label>
                    <Select
                        value={form.watch('status')}
                        onValueChange={(v) => {
                            form.setValue('status', v);
                            pageRef.current = 1;
                            fetchEmployees({ status: v, page: 1 });
                        }}
                    >
                        <SelectTrigger id="status" className="w-full">
                            <SelectValue placeholder="All" />
                        </SelectTrigger>
                        <SelectContent>
                            {['all', 'active', 'inactive'].map((s) => (
                                <SelectItem key={s} value={s}>
                                    {s.toUpperCase()}
                                </SelectItem>
                            ))}
                        </SelectContent>
                    </Select>
                </div>

                <IconInput
                    label="Designation"
                    id="designation"
                    type="text"
                    placeholder="Designation"
                    className="w-full"
                    {...form.register('designation')}
                    value={form.watch('designation')}
                    onChange={(e) => {
                        form.setValue('designation', e.target.value);
                        pageRef.current = 1;
                        fetchEmployees({ designation: e.target.value, page: 1 });
                    }}
                />

                <IconInput
                    label="Search   "
                    id="filter"
                    placeholder="Search"
                    className="w-full"
                    {...form.register('filter')}
                    value={form.watch('filter')}
                    onChange={(e) => form.setValue('filter', e.target.value)}
                />

                <Button
                    variant="outline"
                    onClick={resetAll}
                    className="w-full col-span-full md:col-auto"
                >
                    Reset Filters
                </Button>
            </div>

            <EmployeeTable
                data={data}
                loading={loading}
                onClick={handleSort}
                sort_column={form.watch('sort_column')}
                sort_order={form.watch('sort_order')}
                deleteAdmin={handleDelete}
                copyLoginLink={getEmployeeLoginURL}
            />

            <Pagination
                data={(data?.meta as Meta) ?? {}}
                currentPage={pageRef.current}
                onPageChange={(num) => {
                    pageRef.current = num;
                    fetchEmployees({ page: num });
                }}
                onLimitChange={(lim) => {
                    form.setValue('limit', Number(lim));
                    pageRef.current = 1;
                    fetchEmployees({ limit: Number(lim), page: 1 });
                }}
            />
        </div>
    );
}

'use client';

import { Button } from '@/components/ui/button';
import {
    Select,
    SelectTrigger,
    SelectValue,
    SelectContent,
    SelectItem,
} from '@/components/ui/select';
import { Meta } from '@/types/admin';

interface PaginationProps {
    data: Meta | null;
    currentPage: number;
    onPageChange: (newPage: number) => void;
    onLimitChange: (limit: string) => void;
}

export function Pagination({ data, currentPage, onPageChange, onLimitChange }: PaginationProps) {
    if (!data || data.total <= 10) return null;

    const totalPages = data.last_page;
    const hasMore = currentPage < totalPages;

    return (
        <div className="mt-4 flex justify-between items-center gap-4">
            <div className="flex justify-center items-center gap-4">
                <Button
                    onClick={() => onPageChange(Math.max(currentPage - 1, 1))}
                    disabled={currentPage === 1}
                >
                    Previous
                </Button>
                <span>Page {currentPage}</span>
                <Button
                    onClick={() => onPageChange(currentPage + 1)}
                    disabled={!hasMore}
                >
                    Next
                </Button>
            </div>
            <div className="flex items-center space-x-6 mr-5">
                <span className="text-sm font-medium">
                    {`${(currentPage - 1) * data.per_page + 1} - ${Math.min(
                        currentPage * data.per_page,
                        data.total,
                    )} of ${data.total} records`}
                </span>
                <Select
                    value={data?.per_page?.toString()}
                    onValueChange={onLimitChange}
                >
                    <SelectTrigger id="limit">
                        <SelectValue placeholder="Per page" />
                    </SelectTrigger>
                    <SelectContent>
                        {['5', '10', '50', '100'].map((pageLimit) => (
                            <SelectItem key={pageLimit} value={pageLimit}>
                                {pageLimit}
                            </SelectItem>
                        ))}
                    </SelectContent>
                </Select>
            </div>
        </div>
    );
}

'use client';

import { Button } from '@/components/ui/button';
import {
    Table,
    TableBody,
    TableCell,
    TableHead,
    TableHeader,
    TableRow,
} from '@/components/ui/table';
import { Pencil, Trash, ChevronUp, ChevronDown } from 'lucide-react';
import { format } from 'date-fns';
import Link from 'next/link';
import { AdminsResponse } from '@/types/admin';

interface AdminTableProps {
    data: AdminsResponse | null;
    loading: boolean;
    onClick: (key: string, order: 'asc' | 'desc') => void;
    sort_column: string;
    sort_order: 'asc' | 'desc';
    deleteAdmin: (id: number) => void;
}

export function AdminTable({ data, loading, onClick, sort_column, sort_order, deleteAdmin }: AdminTableProps) {
    const columns = [
        { label: 'Name', key: 'firstname' },
        { label: 'Email', key: 'email' },
        { label: 'Salary', key: null },
        { label: 'Designation', key: null },
        { label: 'Joining Date', key: 'date_of_joining' },
        { label: 'Status', key: null },
        { label: 'Action', key: null },
    ];


    return (
        <div className="rounded-md border bg-white shadow-sm overflow-x-auto">
            <Table>
                <TableHeader className="bg-blue-950">
                    <TableRow className="hover:bg-blue-950">
                        {columns.map((col) => (
                            <TableHead
                                key={col.label}
                                className={`text-white whitespace-nowrap px-4 py-2 text-sm font-semibold ${col.key ? 'cursor-pointer' : ''}`}
                            >
                                {col.key ? (
                                    <span
                                        onClick={() => onClick(col.key!, sort_order === 'desc' ? 'asc' : 'desc')}
                                        className="flex items-center gap-1"
                                    >
                                        {col.label}
                                        {sort_column === col.key &&
                                            (sort_order === 'asc' ? (
                                                <ChevronUp className="w-4 h-4" />
                                            ) : (
                                                <ChevronDown className="w-4 h-4" />
                                            ))}
                                    </span>
                                ) : (
                                    col.label
                                )}
                            </TableHead>
                        ))}
                    </TableRow>
                </TableHeader>
                <TableBody>
                    {loading ? (
                        <TableRow>
                            <TableCell
                                colSpan={columns.length}
                                className="text-center px-4 py-2 text-sm font-medium"
                            >
                                Loading...
                            </TableCell>
                        </TableRow>
                    ) : !data?.data || data.data.length === 0 ? (
                        <TableRow>
                            <TableCell
                                colSpan={columns.length}
                                className="text-center px-4 py-2 text-sm font-medium"
                            >
                                No data found.
                            </TableCell>
                        </TableRow>
                    ) : (
                        data.data.map((admin, index) => (
                            <TableRow
                                key={admin.id}
                                className={`${index % 2 === 0 ? 'bg-gray-50' : 'bg-white'
                                    } hover:bg-gray-100 transition-colors`}
                            >
                                <TableCell className="px-4 py-2">
                                    {admin.firstname} {admin.lastname ?? ''}
                                </TableCell>
                                <TableCell className="px-4 py-2">{admin.email}</TableCell>
                                <TableCell className="px-4 py-2">₹0.00</TableCell>
                                <TableCell className="px-4 py-2">{admin.designation ?? '-'}</TableCell>
                                <TableCell className="px-4 py-2">
                                    {format(new Date(admin.date_of_joining), 'dd MMM yyyy')}
                                </TableCell>
                                <TableCell className="px-4 py-2">
                                    <span
                                        className={`px-2 py-1 text-xs rounded font-medium inline-block ${admin.status === 'active'
                                            ? 'bg-blue-100 text-blue-700'
                                            : 'bg-red-100 text-red-700'
                                            }`}
                                    >
                                        {admin.status}
                                    </span>
                                </TableCell>
                                <TableCell className="px-4 py-2 text-center">
                                    <div className="flex justify-start items-center gap-3">
                                        <Link href={`/admin/${admin.id}`} className="text-blue-600 hover:text-blue-800">
                                            <Pencil className="w-4 h-4" />
                                        </Link>
                                        <Button
                                            size="icon"
                                            variant="ghost"
                                            className="hover:bg-red-50"
                                            aria-label="Delete"
                                            onClick={() => deleteAdmin(admin.id)}
                                        >
                                            <Trash className="w-4 h-4 text-red-600" />
                                        </Button>
                                    </div>
                                </TableCell>
                            </TableRow>
                        ))
                    )}
                </TableBody>
            </Table>
        </div>
    );
}


'use client';

import { Button } from '@/components/ui/button';
import {
    Table,
    TableBody,
    TableCell,
    TableHead,
    TableHeader,
    TableRow,
} from '@/components/ui/table';
import { Pencil, Trash, ChevronUp, ChevronDown, UserCircle2Icon } from 'lucide-react';
import { format } from 'date-fns';
import Link from 'next/link';
import { EmployeesResponse } from '@/types/employees';
import { toast } from 'react-toastify';

interface EmployeeTableProps {
    data: EmployeesResponse | null;
    loading: boolean;
    onClick: (key: string, order: 'asc' | 'desc') => void;
    sort_column: string;
    sort_order: 'asc' | 'desc';
    deleteAdmin: (id: number) => void;
    copyLoginLink: (id: number) => void;
}

export function EmployeeTable({ data, loading, onClick, sort_column, sort_order, deleteAdmin, copyLoginLink }: EmployeeTableProps) {
    const columns = [
        { label: 'Employee ID', key: 'employee_id' },
        { label: 'Name', key: 'firstname' },
        { label: 'Email', key: 'email' },
        { label: 'Salary', key: null },
        { label: 'Designation', key: null },
        { label: 'Joining Date', key: 'date_of_joining' },
        { label: 'Status', key: null },
        { label: 'Action', key: null },
    ];


    return (
        <div className="rounded-md border bg-white shadow-sm overflow-x-auto">
            <Table>
                <TableHeader className="bg-blue-950">
                    <TableRow className="hover:bg-blue-950">
                        {columns.map((col) => (
                            <TableHead
                                key={col.label}
                                className={`text-white whitespace-nowrap px-4 py-2 text-sm font-semibold ${col.key ? 'cursor-pointer' : ''}`}
                            >
                                {col.key ? (
                                    <span
                                        onClick={() => onClick(col.key!, sort_order === 'desc' ? 'asc' : 'desc')}
                                        className="flex items-center gap-1"
                                    >
                                        {col.label}
                                        {sort_column === col.key &&
                                            (sort_order === 'asc' ? (
                                                <ChevronUp className="w-4 h-4" />
                                            ) : (
                                                <ChevronDown className="w-4 h-4" />
                                            ))}
                                    </span>
                                ) : (
                                    col.label
                                )}
                            </TableHead>
                        ))}
                    </TableRow>
                </TableHeader>
                <TableBody>
                    {loading ? (
                        <TableRow>
                            <TableCell
                                colSpan={columns.length}
                                className="text-center px-4 py-2 text-sm font-medium"
                            >
                                Loading...
                            </TableCell>
                        </TableRow>
                    ) : !data?.data || data.data.length === 0 ? (
                        <TableRow>
                            <TableCell
                                colSpan={columns.length}
                                className="text-center px-4 py-2 text-sm font-medium"
                            >
                                No data found.
                            </TableCell>
                        </TableRow>
                    ) : (
                        data.data.map((admin, index) => (
                            <TableRow
                                key={admin.id}
                                className={`${index % 2 === 0 ? 'bg-gray-50' : 'bg-white'
                                    } hover:bg-gray-100 transition-colors`}
                            >
                                <TableCell className="px-4 py-2">{admin.employee_id}</TableCell>
                                <TableCell className="px-4 py-2">
                                    {admin.firstname} {admin.lastname ?? ''}
                                </TableCell>
                                <TableCell className="px-4 py-2">{admin.email}</TableCell>
                                <TableCell className="px-4 py-2">₹0.00</TableCell>
                                <TableCell className="px-4 py-2">{admin.designation ?? '-'}</TableCell>
                                <TableCell className="px-4 py-2">
                                    {format(new Date(admin.date_of_joining), 'dd MMM yyyy')}
                                </TableCell>
                                <TableCell className="px-4 py-2">
                                    <span
                                        className={`px-2 py-1 text-xs rounded font-medium inline-block ${admin.status === 'active'
                                            ? 'bg-blue-100 text-blue-700'
                                            : 'bg-red-100 text-red-700'
                                            }`}
                                    >
                                        {admin.status}
                                    </span>
                                </TableCell>
                                <TableCell className="px-4 py-2 text-center">
                                    <div className="flex justify-start items-center gap-3">
                                        <Button
                                            size="icon"
                                            variant="ghost"
                                            className="hover:bg-red-50"
                                            aria-label="Copy Login Link"
                                            onClick={() => {
                                                copyLoginLink(admin.id)
                                                toast.success("Copied to clipboard");
                                            }}
                                        >
                                            <UserCircle2Icon className="w-4 h-4" />
                                        </Button>
                                        <Link href={`/employees/${admin.id}`} className="text-blue-600 hover:text-blue-800">
                                            <Pencil className="w-4 h-4" />
                                        </Link>
                                        <Button
                                            size="icon"
                                            variant="ghost"
                                            className="hover:bg-red-50"
                                            aria-label="Delete"
                                            onClick={() => deleteAdmin(admin.id)}
                                        >
                                            <Trash className="w-4 h-4 text-red-600" />
                                        </Button>
                                    </div>
                                </TableCell>
                            </TableRow>
                        ))
                    )}
                </TableBody>
            </Table>
        </div>
    );
}
