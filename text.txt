import { useForm } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
    Card,
    CardHeader,
    CardContent,
    CardFooter,
    CardTitle,
} from "@/components/ui/card";
import { Form, FormControl } from "@/components/ui/form";
import {
    Select,
    SelectTrigger,
    SelectValue,
    SelectContent,
    SelectItem,
} from "@/components/ui/select";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Switch } from "@/components/ui/switch";
import {
    Calendar as CalendarIcon,
    User as UserIcon,
    Mail as MailIcon,
    Globe as GlobeIcon,
    Lock as LockIcon,
    Phone as PhoneIcon,
    MapPin as MapPinIcon,
    LucideIcon,
} from "lucide-react";
import { IconInput } from "@/components/ui/icon-Input";
import { accountType, bloodGroupList, contributionList, genderList, maritalStatusList, processDate, statusList } from '@/helper/helper';
import { Label } from '@/components/ui/label';
import { DialogClose } from '@/components/ui/dialog';
import { useRouter } from 'next/navigation';
import { Separator } from '@/components/ui/separator';
import { ICreateEmployeeValues, IEmployeeValues, IUpdateEmployeeValues } from '@/types/employees';

const basicFields = [
    { id: "firstname", label: "First Name", icon: UserIcon, type: "text", placeholder: "Enter first name" },
    { id: "middlename", label: "Middle Name", icon: UserIcon, type: "text", placeholder: "Enter middle name" },
    { id: "lastname", label: "Last Name", icon: UserIcon, type: "text", placeholder: "Enter last name" },
    { id: "nationality", label: "Nationality", icon: GlobeIcon, type: "text", placeholder: "Enter nationality" },
    { id: "email", label: "Email", icon: MailIcon, type: "email", placeholder: "Enter email" },
];

const dateFields = [
    { id: "date_of_birth", label: "Date of Birth", icon: CalendarIcon, type: "date", placeholder: "Select date" },
    { id: "date_of_joining", label: "Date of Joining", icon: CalendarIcon, type: "date", placeholder: "Select date" },
    { id: "probation_end_date", label: "Probation End Date", icon: CalendarIcon, type: "date", placeholder: "Select date" },
];

const contactFields = [
    { id: "residential", label: "Residential Address", icon: MapPinIcon, type: "text", placeholder: "Enter address" },
    { id: "city", label: "City", icon: GlobeIcon, type: "text", placeholder: "Enter city" },
    { id: "state", label: "State", icon: MapPinIcon, type: "text", placeholder: "Enter state" },
    { id: "country", label: "Country", icon: GlobeIcon, type: "text", placeholder: "Enter country" },
    { id: "pincode", label: "Pincode", icon: MapPinIcon, type: "number", placeholder: "Enter pincode" },
    { id: "personal", label: "Personal Contact", icon: PhoneIcon, type: "number", placeholder: "Enter contact number" },
    { id: "home", label: "Home Contact", icon: PhoneIcon, type: "number", placeholder: "Enter contact number" },
];

const bankFields = [
    { id: "bank_name", label: "Bank Name", icon: GlobeIcon, type: "text", placeholder: "Enter bank name" },
    { id: "account_holder_name", label: "Account Holder Name", icon: UserIcon, type: "text", placeholder: "Enter account holder name" },
    { id: "account_no", label: "Account Number", icon: GlobeIcon, type: "number", placeholder: "Enter account number" },
    { id: "branch_name", label: "Branch Name", icon: MapPinIcon, type: "text", placeholder: "Enter branch name" },
    { id: "ifsc_code", label: "IFSC Code", icon: GlobeIcon, type: "text", placeholder: "Enter IFSC code" },
];

const documentFields = [
    { id: "aadhar_card", label: "Aadhar Card Number", icon: GlobeIcon, type: "text", placeholder: "Enter Aadhar number" },
    { id: "pan_card", label: "PAN Card Number", icon: UserIcon, type: "text", placeholder: "Enter PAN number" },
];

const educationFields = [
    { id: "degree", label: "Degree", icon: GlobeIcon, type: "text", placeholder: "Enter degree" },
    { id: "college_name", label: "College/University", icon: GlobeIcon, type: "text", placeholder: "Enter college/university" },
    { id: "designation", label: "Designation", icon: UserIcon, type: "text", placeholder: "Enter designation" },
    { id: "start_month_year", label: "Start Month/Year", icon: CalendarIcon, type: "month", placeholder: "Select month/year" },
    { id: "end_month_year", label: "End Month/Year", icon: CalendarIcon, type: "month", placeholder: "Select month/year" },
];

const pfFields = [
    { id: "pf_account_no", label: "PF Account Number", icon: GlobeIcon, type: "text", placeholder: "Enter PF account number" },
    { id: "uan_no", label: "UAN Number", icon: GlobeIcon, type: "text", placeholder: "Enter UAN number" },
    { id: "esi_no", label: "ESI Number", icon: GlobeIcon, type: "text", placeholder: "Enter ESI number" },
];

interface EmployeeFormProps {
    data?: IEmployeeValues;
    isEditing: boolean;
    onSubmit: (data: ICreateEmployeeValues | IUpdateEmployeeValues) => Promise<void>;
}

export function EmployeeForm({ data, isEditing, onSubmit }: EmployeeFormProps) {
    const router = useRouter();

    const getDefaultValues = (): ICreateEmployeeValues | IUpdateEmployeeValues => {
        if (!isEditing) {
            return {
                firstname: "",
                middlename: "",
                lastname: "",
                email: "",
                password: "",
                gender: "male",
                marital_status: "unmarried",
                blood_group: "",
                date_of_birth: "",
                date_of_joining: "",
                probation_end_date: "",
                status: "active",
                last_working_date: "",
                abry_contribution: 0,
                esi_contribution: 0,
                pf_contribution: 0,
                employee_id: "",
                next_increment_date: "",
                salary_contract_period: "",
                salary_increment_date: "",
                nationality: "",
            };
        } else if (data) {
            return {
                ...data,
                middlename: data.middlename ?? '',
                lastname: data.lastname ?? '',
                designation: data.designation ?? '',
                aadhar_card: data.aadhar_card ?? '',
                pan_card: data.pan_card ?? '',
                pf_account_no: data.pf_account_no ?? '',
                uan_no: data.uan_no ?? '',
                esi_no: data.esi_no ?? '',
                blood_group: data.blood_group ?? '',
                residential: data.address?.residential ?? '',
                city: data.address?.city ?? '',
                state: data.address?.state ?? '',
                country: data.address?.country ?? '',
                bank_name: data.bank_info?.bank_name ?? '',
                account_holder_name: data.bank_info?.account_holder_name ?? '',
                account_no: data.bank_info?.account_no ?? 0,
                branch_name: data.bank_info?.branch_name ?? '',
                ifsc_code: data.bank_info?.ifsc_code ?? '',
                account_type: data.bank_info?.account_type ?? '',
                degree: data.education_info?.degree ?? '',
                college_name: data.education_info?.college_name ?? '',
                date_of_birth: processDate(data.date_of_birth, 'date'),
                last_working_date: processDate(data.last_working_date, 'date'),
                date_of_joining: processDate(data.date_of_joining, 'date'),
                probation_end_date: processDate(data.probation_end_date, 'date'),
                start_month_year: processDate(data.education_info?.start_month_year, 'month'),
                end_month_year: processDate(data.education_info?.end_month_year, 'month'),
                pincode: data.address?.pincode ?? 0,
                home: data.contact_no?.home ?? 0,
                personal: data.contact_no?.personal ?? 0,
                employee_id: data.employee_id ?? '',
                salary_contract_period: processDate(data.salary_contract_period, 'month'),
                salary_increment_date: processDate(data.salary_increment_date, 'date'),
                next_increment_date: processDate(data.next_increment_date, 'date'),
                status: data.status ?? '',
                nationality: data.nationality ?? '',
                email: data.email ?? '',
                gender: data.gender ?? '',
                marital_status: data.marital_status ?? '',
                esi_contribution: data.esi_contribution ?? 0,
                pf_contribution: data.pf_contribution ?? 0,
                abry_contribution: data.abry_contribution ?? 0,
                hold_percentage: data.hold_percentage ?? 0,
            };
        }
        return {} as ICreateEmployeeValues | IUpdateEmployeeValues;
    };

    const form = useForm<ICreateEmployeeValues | IUpdateEmployeeValues>({
        defaultValues: getDefaultValues(),
    });

    const FormSection = ({ title, children }: { title: string; children: React.ReactNode }) => (
        <Card className="border-0 shadow-none bg-transparent">
            <CardHeader>
                <CardTitle className="text-lg font-semibold text-gray-800">{title}</CardTitle>
            </CardHeader>
            <CardContent className="space-y-6 p-6">{children}</CardContent>
            <Separator className="bg-gray-500/50 sm:max-w-[80vw] xl:max-w-[86vw] mx-auto" />
        </Card>
    );

    const InputGroup = ({ fields }: { fields: { id: string; label: string; icon: LucideIcon; type: string; placeholder: string }[] }) => (
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
            {fields.map((field) => (
                <FormControl key={field.id}>
                    <IconInput
                        label={field.label}
                        id={field.id}
                        type={field.type}
                        icon={field.icon}
                        placeholder={field.placeholder}
                        {...form.register(field.id as keyof ICreateEmployeeValues)}
                        className="border-gray-300"
                    />
                </FormControl>
            ))}
        </div>
    );

    return (
        <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6 mx-auto bg-white">
                <FormSection title="Basic Details">
                    <InputGroup fields={basicFields} />
                    {!isEditing && (
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                            <FormControl>
                                <IconInput
                                    label="Password"
                                    id="password"
                                    type="password"
                                    icon={LockIcon}
                                    placeholder="Enter password"
                                    {...form.register("password")}
                                    className="border-gray-300 focus:ring-blue-500 focus:border-blue-500"
                                    aria-required
                                />
                            </FormControl>
                        </div>
                    )}
                    <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                        <div className="space-y-2">
                            <Label className="text-sm font-medium text-gray-700">
                                Gender <span className="text-red-500">*</span>
                            </Label>
                            <RadioGroup
                                value={form.watch("gender")}
                                onValueChange={(value) => form.setValue("gender", value as IEmployeeValues["gender"])}
                                className="flex flex-wrap gap-4"
                                aria-label="Gender"
                            >
                                {genderList.map((gender) => (
                                    <div key={gender} className="flex items-center space-x-2">
                                        <RadioGroupItem value={gender} id={gender} />
                                        <Label htmlFor={gender} className="text-sm text-gray-600 capitalize">{gender}</Label>
                                    </div>
                                ))}
                            </RadioGroup>
                        </div>
                        <div className="space-y-2">
                            <Label className="text-sm font-medium text-gray-700">
                                Marital Status <span className="text-red-500">*</span>
                            </Label>
                            <RadioGroup
                                value={form.watch("marital_status")}
                                onValueChange={(value) => form.setValue("marital_status", value as IEmployeeValues["marital_status"])}
                                className="flex flex-wrap gap-4"
                                aria-label="Marital Status"
                            >
                                {maritalStatusList.map((status) => (
                                    <div key={status} className="flex items-center space-x-2">
                                        <RadioGroupItem value={status} id={status} />
                                        <Label htmlFor={status} className="text-sm text-gray-600 capitalize">{status}</Label>
                                    </div>
                                ))}
                            </RadioGroup>
                        </div>
                    </div>
                    <InputGroup fields={dateFields.filter((f) => f)} />
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        <div className="space-y-2">
                            <Label className="text-sm font-medium text-gray-700">
                                Status <span className="text-red-500">*</span>
                            </Label>
                            <Select
                                value={form.watch("status")}
                                onValueChange={(value) => form.setValue("status", value as IEmployeeValues["status"])}
                                aria-label="Status"
                            >
                                <SelectTrigger className="border-gray-300 focus:ring-blue-500 w-full">
                                    <SelectValue placeholder="Select status" />
                                </SelectTrigger>
                                <SelectContent>
                                    {statusList.map((status) => (
                                        <SelectItem key={status} value={status}>
                                            {status.charAt(0).toUpperCase() + status.slice(1)}
                                        </SelectItem>
                                    ))}
                                </SelectContent>
                            </Select>
                        </div>
                        <FormControl>
                            <IconInput
                                label="Last Working Date"
                                id="last_working_date"
                                type="date"
                                icon={CalendarIcon}
                                placeholder="Select date"
                                {...form.register("last_working_date")}
                                className="border-gray-300 focus:ring-blue-500 focus:border-blue-500"
                            />
                        </FormControl>
                        <div className="space-y-2">
                            <Label className="text-sm font-medium text-gray-700">Blood Group</Label>
                            <Select
                                value={form.watch("blood_group") ?? ""}
                                onValueChange={(value) => form.setValue("blood_group", value as IEmployeeValues["blood_group"])}
                                aria-label="Blood Group"
                            >
                                <SelectTrigger className="border-gray-300 focus:ring-blue-500 w-full">
                                    <SelectValue placeholder="Select blood group" />
                                </SelectTrigger>
                                <SelectContent>
                                    {bloodGroupList.map((bg) => (
                                        <SelectItem key={bg} value={bg}>
                                            {bg.toUpperCase()}
                                        </SelectItem>
                                    ))}
                                </SelectContent>
                            </Select>
                        </div>
                    </div>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        {contributionList.map((name) => (
                            <div key={name} className="flex items-center w-full bg-gray-100 rounded-lg px-4 py-3">
                                <Label className="capitalize mr-auto text-sm font-medium text-gray-700">
                                    {name.split("_")[0]} Contribution
                                </Label>
                                <Switch
                                    checked={form.watch(name) === 1}
                                    onCheckedChange={(checked) => form.setValue(name, checked ? 1 : 0)}
                                    aria-label={`${name.split("_")[0]} Contribution`}
                                />
                            </div>
                        ))}
                    </div>
                </FormSection>

                {isEditing && (
                    <>
                        <FormSection title="Contact Details">
                            <InputGroup fields={contactFields.slice(0, 3)} />
                            <InputGroup fields={contactFields.slice(3, 6)} />
                            <InputGroup fields={contactFields.slice(6)} />
                        </FormSection>

                        <FormSection title="Bank Details">
                            <InputGroup fields={bankFields.slice(0, 3)} />
                            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                                {bankFields.slice(3, 5).map((field) => (
                                    <FormControl key={field.id}>
                                        <IconInput
                                            label={field.label}
                                            id={field.id}
                                            type={field.type}
                                            icon={field.icon}
                                            placeholder={field.placeholder}
                                            {...form.register(field.id as keyof ICreateEmployeeValues)}
                                            className="border-gray-300 focus:ring-blue-500 focus:border-blue-500"
                                        />
                                    </FormControl>
                                ))}
                                <div className="space-y-2">
                                    <Label className="text-sm font-medium text-gray-700">Account Type</Label>
                                    <Select
                                        value={form.watch("account_type")}
                                        onValueChange={(value) => form.setValue("account_type", value)}
                                        aria-label="Account Type"
                                    >
                                        <SelectTrigger className="border-gray-300 focus:ring-blue-500">
                                            <SelectValue placeholder="Select Account Type" />
                                        </SelectTrigger>
                                        <SelectContent>
                                            {accountType.map((type) => (
                                                <SelectItem key={type} value={type}>
                                                    {type.charAt(0).toUpperCase() + type.slice(1)}
                                                </SelectItem>
                                            ))}
                                        </SelectContent>
                                    </Select>
                                </div>
                            </div>
                        </FormSection>

                        <FormSection title="Document Details">
                            <InputGroup fields={documentFields} />
                        </FormSection>

                        <FormSection title="Education Details">
                            <InputGroup fields={educationFields.slice(0, 3)} />
                            <InputGroup fields={educationFields.slice(3)} />
                        </FormSection>

                        <FormSection title="PF A/C, UAN & ESI Details">
                            <InputGroup fields={pfFields} />
                        </FormSection>
                    </>
                )}

                <CardFooter
                    className={`${isEditing ? "fixed bottom-0 left-0 right-0" : "sticky bottom-0"} z-50 py-3 sm:py-4 border-gray-200`}
                >
                    <div className="flex justify-end space-x-2 sm:space-x-3 mx-auto w-full px-4 sm:px-6">
                        {isEditing ? (
                            <Button
                                type="button"
                                variant="outline"
                                onClick={() => router.back()}
                                className="border-gray-300 text-gray-700 hover:bg-gray-100 text-sm px-3 py-2 sm:px-4 sm:py-2 flex-1 sm:flex-none"
                                disabled={form.formState.isSubmitting}
                            >
                                Cancel
                            </Button>
                        ) : (
                            <DialogClose asChild>
                                <Button
                                    type="button"
                                    variant="outline"
                                    className="border-gray-300 text-gray-700 hover:bg-gray-100 text-sm px-3 py-2 sm:px-4 sm:py-2 flex-1 sm:flex-none"
                                    disabled={form.formState.isSubmitting}
                                >
                                    Cancel
                                </Button>
                            </DialogClose>
                        )}
                        <Button
                            type="submit"
                            disabled={form.formState.isSubmitting}
                            loading={form.formState.isSubmitting}
                            className="bg-blue-600 hover:bg-blue-700 text-white text-sm px-3 py-2 sm:px-4 sm:py-2 flex-1 sm:flex-none"
                        >
                            Save
                        </Button>
                    </div>
                </CardFooter>
            </form>
        </Form>
    );
}

// // app/(auth)/admin/_employeeFormDialog.tsx

"use client";

import React, { Dispatch, SetStateAction } from "react";
import { useForm } from "react-hook-form";
import {
    Dialog,
    DialogTrigger,
    DialogContent,
    DialogClose,
    DialogTitle,
} from "@/components/ui/dialog";
import {
    Card,
    CardHeader,
    CardContent,
    CardFooter,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
    Form,
    FormControl,
} from "@/components/ui/form";
import {
    Select,
    SelectTrigger,
    SelectValue,
    SelectContent,
    SelectItem,
} from "@/components/ui/select";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Switch } from "@/components/ui/switch";
import {
    Calendar as CalendarIcon,
    User as UserIcon,
    Mail as MailIcon,
    Lock as LockIcon,
} from "lucide-react";
import { IconInput } from "@/components/ui/icon-Input";
import { Separator } from '@/components/ui/separator';
import { ICreateEmployeeValues } from '@/types/employees';

export function EmployeeFormDialog({
    onSubmit,
    open,
    setOpen,
}: {
    onSubmit: (data: ICreateEmployeeValues) => void;
    open: boolean;
    setOpen: Dispatch<SetStateAction<boolean>>;
}) {

    const form = useForm<ICreateEmployeeValues>({
        defaultValues: {
            firstname: "",
            middlename: "",
            lastname: "",
            email: "",
            password: "",
            gender: "male",
            marital_status: "unmarried",
            blood_group: "",
            date_of_birth: "",
            date_of_joining: "",
            probation_end_date: "",
            status: "active",
            last_working_date: "",
            abry_contribution: 0,
            esi_contribution: 0,
            pf_contribution: 0,
            employee_id: "",
            next_increment_date: "",
            salary_contract_period: "",
            salary_increment_date: "",
            nationality: "",
        },
    });


    return (
        <Dialog open={open} onOpenChange={setOpen}>
            <DialogTrigger asChild>
                <Button variant="default" className='bg-blue-950 hover:bg-blue-950/90 text-white'>
                    Create New Employee</Button>
            </DialogTrigger>
            <DialogContent className="w-full max-w-[95vw] sm:max-w-[90vw] lg:max-w-[80vw] xl:max-w-[1200px] max-h-[90vh] overflow-y-auto px-2 sm:px-6 py-4">
                <Card className="border-0 shadow-none">
                    <CardHeader>
                        <DialogTitle className='text-2xl'>Create New Employee</DialogTitle>
                        <Separator className='bg-gray-500/50 ' />
                    </CardHeader>
                    <Form {...form}>
                        <form onSubmit={form.handleSubmit(onSubmit)}>
                            <CardContent className="space-y-8">
                                {/* Row 1: firstName, middleName, lastName */}
                                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                                    <FormControl className='space-y-1'>
                                        <IconInput
                                            label='First Name'
                                            id="firstname"
                                            placeholder="First Name"
                                            icon={UserIcon}
                                            {...form.register("firstname")}
                                        />
                                    </FormControl>
                                    <FormControl className='space-y-1'>
                                        <IconInput
                                            label='Middle Name'
                                            id="middlename"
                                            placeholder="Middle Name"
                                            icon={UserIcon}
                                            {...form.register("middlename")}
                                        />
                                    </FormControl>
                                    <FormControl className='space-y-1'>
                                        <IconInput
                                            label='Last Name'
                                            id="lastname"
                                            placeholder="Last Name"
                                            icon={UserIcon}
                                            {...form.register("lastname")}
                                        />
                                    </FormControl>
                                </div>

                                {/* Row 2: employee_id, email, password */}
                                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                                    <FormControl className='space-y-1'>
                                        <IconInput
                                            label='Nationality'
                                            id="employee_id"
                                            placeholder="Nationality"
                                            icon={UserIcon}
                                            {...form.register("employee_id")}
                                        />
                                    </FormControl>
                                    <FormControl className='space-y-1'>
                                        <IconInput
                                            label='Email'
                                            id="email"
                                            type="email"
                                            placeholder="Email"
                                            icon={MailIcon}
                                            {...form.register("email")}
                                        />
                                    </FormControl>
                                    <FormControl className='space-y-1'>
                                        <IconInput
                                            label='Password'
                                            id="password"
                                            type="password"
                                            placeholder="Password"
                                            icon={LockIcon}
                                            {...form.register("password")}
                                        />
                                    </FormControl>
                                </div>

                                {/* Row 3: gender, marital_status */}
                                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                                    <div className='space-y-1'>
                                        <label className="block text-sm font-medium">
                                            Gender <span className="text-destructive">*</span>
                                        </label>
                                        <RadioGroup
                                            value={form.watch("gender")}
                                            onValueChange={(value) => form.setValue("gender", value as ICreateEmployeeValues["gender"], { shouldValidate: true })}
                                            className="flex space-x-4"
                                        >
                                            <div className="flex items-center space-x-2">
                                                <RadioGroupItem value="male" id="male" />
                                                <label htmlFor="male" className="font-normal">Male</label>
                                            </div>
                                            <div className="flex items-center space-x-2">
                                                <RadioGroupItem value="female" id="female" />
                                                <label htmlFor="female" className="font-normal">Female</label>
                                            </div>
                                            <div className="flex items-center space-x-2">
                                                <RadioGroupItem value="other" id="other" />
                                                <label htmlFor="other" className="font-normal">Other</label>
                                            </div>
                                        </RadioGroup>
                                    </div>
                                    <div className='space-y-1'>
                                        <label className="block text-sm font-medium">
                                            Marital Status <span className="text-destructive">*</span>
                                        </label>
                                        <RadioGroup
                                            value={form.watch("marital_status")}
                                            onValueChange={(value) => form.setValue("marital_status", value as ICreateEmployeeValues["marital_status"], { shouldValidate: true })}
                                            className="flex space-x-4"
                                        >
                                            <div className="flex items-center space-x-2">
                                                <RadioGroupItem value="unmarried" id="unmarried" />
                                                <label htmlFor="unmarried" className="font-normal">Unmarried</label>
                                            </div>
                                            <div className="flex items-center space-x-2">
                                                <RadioGroupItem value="engaged" id="engaged" />
                                                <label htmlFor="engaged" className="font-normal">Engaged</label>
                                            </div>
                                            <div className="flex items-center space-x-2">
                                                <RadioGroupItem value="married" id="married" />
                                                <label htmlFor="married" className="font-normal">Married</label>
                                            </div>
                                        </RadioGroup>
                                    </div>
                                </div>

                                {/* Row 4: date_of_birth, date_of_joining, probation_end_date */}
                                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                                    <FormControl className='space-y-1'>
                                        <IconInput
                                            label='Date of Birth'
                                            id="date_of_birth"
                                            type="date"
                                            icon={CalendarIcon}
                                            {...form.register("date_of_birth")}
                                        />
                                    </FormControl>
                                    <FormControl className='space-y-1'>
                                        <IconInput
                                            label='Date of Joining'
                                            id="date_of_joining"
                                            type="date"
                                            icon={CalendarIcon}
                                            {...form.register("date_of_joining")}
                                        />
                                    </FormControl>
                                    <FormControl className='space-y-1'>
                                        <IconInput
                                            label='Probation End Date'
                                            id="probation_end_date"
                                            type="date"
                                            icon={CalendarIcon}
                                            {...form.register("probation_end_date")}
                                        />
                                    </FormControl>
                                </div>
                                {/* Row 5: salary_increment_date, salary_contract_period, next_increment_date */}
                                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                                    <FormControl className='space-y-1'>
                                        <IconInput
                                            label='Salary Increment Date'
                                            id="salary_increment_date"
                                            type="date"
                                            icon={CalendarIcon}
                                            {...form.register("salary_increment_date")}
                                        />
                                    </FormControl>
                                    <div className="space-y-1">
                                        <label htmlFor="salary_contract_period" className="block text-sm font-medium">
                                            Salary Contract Period
                                        </label>
                                        <Select
                                            value={form.watch("salary_contract_period") || ""}
                                            onValueChange={(value) => {
                                                const selectedValue = value === "" ? "" : value;
                                                form.setValue("salary_contract_period", selectedValue, { shouldValidate: true });
                                            }}
                                        >
                                            <SelectTrigger id="salary_contract_period">
                                                <SelectValue placeholder="Select Contract Period" />
                                            </SelectTrigger>
                                            <SelectContent>
                                                <SelectItem value="none">Select Contract Period</SelectItem>
                                                {["3", "6", "8", "12", "15", "18", "24"].map((period) => (
                                                    <SelectItem key={period} value={period}>
                                                        {period} Month
                                                    </SelectItem>
                                                ))}
                                            </SelectContent>
                                        </Select>
                                    </div>

                                    <FormControl className='space-y-1'>
                                        <IconInput
                                            label='Next Increment Date'
                                            id="next_increment_date"
                                            type="date"
                                            icon={CalendarIcon}
                                            {...form.register("next_increment_date")}
                                            disabled
                                        />
                                    </FormControl>
                                </div>

                                {/* Row 5: blood_group, status, last_working_date */}
                                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                                    {/* Blood Group */}
                                    <div className="space-y-1">
                                        <label htmlFor="blood_group" className="block text-sm font-medium">
                                            Blood Group
                                        </label>
                                        <Select
                                            value={form.watch("blood_group") ?? ""}
                                            onValueChange={(value) =>
                                                form.setValue("blood_group", value as ICreateEmployeeValues["blood_group"], {
                                                    shouldValidate: true,
                                                })
                                            }
                                        >
                                            <SelectTrigger id="blood_group">
                                                <SelectValue placeholder="Select blood group" />
                                            </SelectTrigger>
                                            <SelectContent>
                                                {["a+", "a-", "b+", "b-", "ab+", "ab-", "o+", "o-"].map((bg) => (
                                                    <SelectItem key={bg} value={bg}>
                                                        {bg.toUpperCase()}
                                                    </SelectItem>
                                                ))}
                                            </SelectContent>
                                        </Select>
                                    </div>

                                    {/* Status */}
                                    <div className="space-y-1">
                                        <label htmlFor="status" className="block text-sm font-medium">
                                            Status <span className="text-destructive">*</span>
                                        </label>
                                        <Select
                                            value={form.watch("status")}
                                            onValueChange={(value) =>
                                                form.setValue("status", value as ICreateEmployeeValues["status"], {
                                                    shouldValidate: true,
                                                })
                                            }
                                        >
                                            <SelectTrigger id="status">
                                                <SelectValue>
                                                    {form.watch("status")}
                                                </SelectValue>
                                            </SelectTrigger>
                                            <SelectContent>
                                                <SelectItem value="active">Active</SelectItem>
                                                <SelectItem value="inactive">Inactive</SelectItem>
                                            </SelectContent>
                                        </Select>
                                    </div>

                                    {/* Last Working Date */}
                                    <FormControl>
                                        <IconInput
                                            label="Last Working Date"
                                            id="last_working_date"
                                            type="date"
                                            icon={CalendarIcon}
                                            {...form.register("last_working_date")}
                                        />
                                    </FormControl>
                                </div>

                                {/* Row 6: contributions */}
                                <div className="flex flex-wrap gap-4">
                                    {(["pf_contribution", "abry_contribution", "esi_contribution"] as const).map((name) => (
                                        <div
                                            key={name}
                                            className="flex items-center w-full sm:w-[48%] lg:w-[32%] bg-muted/30 rounded-md px-4 py-2"
                                        >
                                            <label className="capitalize mr-auto text-sm font-medium">
                                                {name.split("_")[0].toUpperCase() + " Contribution*"}
                                            </label>
                                            <Switch
                                                checked={form.watch(name) === 1}
                                                onCheckedChange={(checked) =>
                                                    form.setValue(name, checked ? 1 : 0, { shouldValidate: true })
                                                }
                                            />
                                        </div>
                                    ))}
                                </div>
                            </CardContent>
                            <CardFooter className="flex justify-end space-x-2 mt-4">
                                <DialogClose asChild>
                                    <Button type="button" variant="outline">
                                        Cancel
                                    </Button>
                                </DialogClose>
                                <Button type="submit" disabled={form.formState.isSubmitting}>
                                    {form.formState.isSubmitting ? "Saving..." : "Save"}
                                </Button>
                            </CardFooter>
                        </form>
                    </Form>
                </Card>
            </DialogContent>
        </Dialog>
    );
}

"use client";

import { useForm } from 'react-hook-form';
import {
    Card,
    CardHeader,
    CardContent,
    CardFooter,
    CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
    Form,
    FormControl,
} from "@/components/ui/form";
import {
    Select,
    SelectTrigger,
    SelectValue,
    SelectContent,
    SelectItem,
} from "@/components/ui/select";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Switch } from "@/components/ui/switch";
import {
    Calendar as CalendarIcon,
    User as UserIcon,
    Mail as MailIcon,
    Globe as GlobeIcon,
    Phone as PhoneIcon,
    MapPin as MapPinIcon,
} from "lucide-react";
import { IconInput } from "@/components/ui/icon-Input";
import { Separator } from '@/components/ui/separator';
import { useRouter } from 'next/navigation';
import { IEmployeeValues, IUpdateEmployeeValues } from '@/types/employees';
import useEmployees from '@/hooks/use-employees';
import { accountType, bloodGroupList, contributionList, genderList, maritalStatusList, statusList } from '@/helper/helper';

// Preprocess dates to match input types
const processDate = (dateStr?: string | null, type: 'date' | 'month' = 'date'): string => {
    if (!dateStr) return '';
    const date = new Date(dateStr);
    return type === 'date'
        ? date.toISOString().split('T')[0] // YYYY-MM-DD
        : date.toISOString().slice(0, 7); // YYYY-MM
};


export function EmployeeEditForm({ data }: { data: IEmployeeValues }) {
    const form = useForm<IUpdateEmployeeValues>({
        defaultValues: {
            ...data,
            middlename: data.middlename ?? '',
            lastname: data.lastname ?? '',
            designation: data.designation ?? '',
            aadhar_card: data.aadhar_card ?? '',
            pan_card: data.pan_card ?? '',
            pf_account_no: data.pf_account_no ?? '',
            uan_no: data.uan_no ?? '',
            esi_no: data.esi_no ?? '',
            blood_group: data.blood_group ?? '',
            residential: data.address?.residential ?? '',
            city: data.address?.city ?? '',
            state: data.address?.state ?? '',
            country: data.address?.country ?? '',
            bank_name: data.bank_info?.bank_name ?? '',
            account_holder_name: data.bank_info?.account_holder_name ?? '',
            account_no: data.bank_info?.account_no ?? 0,
            branch_name: data.bank_info?.branch_name ?? '',
            ifsc_code: data.bank_info?.ifsc_code ?? '',
            account_type: data.bank_info?.account_type ?? '',
            degree: data.education_info?.degree ?? '',
            college_name: data.education_info?.college_name ?? '',
            date_of_birth: processDate(data.date_of_birth, 'date'),
            last_working_date: processDate(data.last_working_date, 'date'),
            date_of_joining: processDate(data.date_of_joining, 'date'),
            probation_end_date: processDate(data.probation_end_date, 'date'),
            start_month_year: processDate(data.education_info?.start_month_year, 'month'),
            end_month_year: processDate(data.education_info?.end_month_year, 'month'),
            pincode: data.address?.pincode ?? 0,
            home: data.contact_no?.home ?? 0,
            personal: data.contact_no?.personal ?? 0,
            employee_id: data.employee_id ?? '',
            salary_contract_period: processDate(data.salary_contract_period, 'month'),
            salary_increment_date: processDate(data.salary_increment_date, 'date'),
            next_increment_date: processDate(data.next_increment_date, 'date'),
            status: data.status ?? '',
            nationality: data.nationality ?? '',
            email: data.email ?? '',
            gender: data.gender ?? '',
            marital_status: data.marital_status ?? '',
            esi_contribution: data.esi_contribution ?? 0,
            pf_contribution: data.pf_contribution ?? 0,
            abry_contribution: data.abry_contribution ?? 0,
            hold_percentage: data.hold_percentage ?? 0,
        },
    });
    const router = useRouter();

    const { updateEmployee } = useEmployees();



    const onSubmit = async (formData: IUpdateEmployeeValues) => {
        await updateEmployee(data.id, formData);
    };

    return (
        <Card className="border-0 shadow-none bg-white">
            <Form {...form}>
                <form onSubmit={form.handleSubmit(onSubmit)}>
                    {/* Basic Details */}
                    <CardHeader>
                        <CardTitle className="text-xl">Basic Details</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-8 mt-4">
                        {/* Row 1: firstName, middleName, lastName, employee_id */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="First Name"
                                    id="firstname"
                                    placeholder="First Name"
                                    icon={UserIcon}
                                    className='w-full'
                                    {...form.register("firstname")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Middle Name"
                                    id="middlename"
                                    placeholder="Middle Name"
                                    icon={UserIcon}
                                    className='w-full'
                                    {...form.register("middlename")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Last Name"
                                    id="lastname"
                                    placeholder="Last Name"
                                    icon={UserIcon}
                                    className='w-full'
                                    {...form.register("lastname")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Employee ID"
                                    id="employee_id"
                                    placeholder="Employee ID"
                                    className='w-full'
                                    {...form.register("employee_id")}
                                />
                            </FormControl>
                        </div>
                        {/* Row 2: email, status, gender, marital_status */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Email"
                                    id="email"
                                    type="email"
                                    placeholder="Email"
                                    icon={MailIcon}
                                    className='w-full'
                                    {...form.register("email")}
                                />
                            </FormControl>
                            <div className="space-y-1">
                                <label htmlFor="status" className="block text-sm font-medium">
                                    Status <span className="text-destructive">*</span>
                                </label>
                                <Select
                                    value={form.watch("status")}
                                    onValueChange={(value) =>
                                        form.setValue("status", value as IEmployeeValues["status"], {
                                            shouldValidate: true,
                                        })
                                    }
                                >
                                    <SelectTrigger id="status" className='w-full'>
                                        <SelectValue>{form.watch("status")}</SelectValue>
                                    </SelectTrigger>
                                    <SelectContent>
                                        {statusList.map((status) => (
                                            <SelectItem key={status} value={status}>
                                                {status}
                                            </SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                            </div>
                            <div className="space-y-1">
                                <label className="block text-sm font-medium">
                                    Gender <span className="text-destructive">*</span>
                                </label>
                                <RadioGroup
                                    value={form.watch("gender")}
                                    onValueChange={(value) =>
                                        form.setValue("gender", value as IEmployeeValues["gender"], {
                                            shouldValidate: true,
                                        })
                                    }
                                    className="flex space-x-4 w-full"
                                >
                                    {genderList.map((gender) => (
                                        <div key={gender} className="flex items-center space-x-2">
                                            <RadioGroupItem value={gender} id={gender} />
                                            <label htmlFor={gender} className="font-normal">{gender}</label>
                                        </div>
                                    ))}
                                </RadioGroup>
                            </div>
                            <div className="space-y-1">
                                <label className="block text-sm font-medium">
                                    Marital Status <span className="text-destructive">*</span>
                                </label>
                                <RadioGroup
                                    value={form.watch("marital_status")}
                                    onValueChange={(value) =>
                                        form.setValue("marital_status", value as IEmployeeValues["marital_status"], {
                                            shouldValidate: true,
                                        })
                                    }
                                    className="flex space-x-4 w-full"
                                >
                                    {maritalStatusList.map((maritalStatus) => (
                                        <div key={maritalStatus} className="flex items-center space-x-2">
                                            <RadioGroupItem value={maritalStatus} id={maritalStatus} />
                                            <label htmlFor={maritalStatus} className="font-normal">
                                                {maritalStatus}
                                            </label>
                                        </div>
                                    ))}
                                </RadioGroup>
                            </div>
                        </div>

                        {/* Row 3: DOB, DOJ ,last_working_date, probation_end_date,*/}
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Date of Birth"
                                    id="date_of_birth"
                                    type="date"
                                    icon={CalendarIcon}
                                    className='w-full'
                                    {...form.register("date_of_birth")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Date of Joining"
                                    id="date_of_joining"
                                    type="date"
                                    icon={CalendarIcon}
                                    className='w-full'
                                    {...form.register("date_of_joining")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Last Working Date"
                                    id="last_working_date"
                                    type="date"
                                    icon={CalendarIcon}
                                    className='w-full'
                                    {...form.register("last_working_date")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Probation End Date"
                                    id="probation_end_date"
                                    type="date"
                                    icon={CalendarIcon}
                                    className='w-full'
                                    {...form.register("probation_end_date")}
                                />
                            </FormControl>
                        </div>

                        {/* Row 4:  Salary_increment_date, salary_contract_period, Next_increment_date, Nationality */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Salary Increment Date"
                                    id="salary_increment_date"
                                    type="date"
                                    icon={CalendarIcon}
                                    className='w-full'
                                    {...form.register("salary_increment_date")}
                                />
                            </FormControl>
                            <div className="space-y-1">
                                <label htmlFor="salary_contract_period" className="block text-sm font-medium">
                                    Salary Contract Period
                                </label>
                                <Select
                                    value={form.watch("salary_contract_period") || ""}
                                    onValueChange={(value) => {
                                        const selectedValue = value === "" ? "" : value;
                                        form.setValue("salary_contract_period", selectedValue, { shouldValidate: true });
                                    }}
                                >
                                    <SelectTrigger id="salary_contract_period" className='w-full'>
                                        <SelectValue placeholder="Select Contract Period" />
                                    </SelectTrigger>
                                    <SelectContent>
                                        <SelectItem value="none">Select Contract Period</SelectItem>
                                        {["3", "6", "8", "12", "15", "18", "24"].map((period) => (
                                            <SelectItem key={period} value={period}>
                                                {period} Month
                                            </SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                            </div>
                            <FormControl className='space-y-1'>
                                <IconInput
                                    label='Next Increment Date'
                                    id="next_increment_date"
                                    type="date"
                                    icon={CalendarIcon}
                                    className='w-full'
                                    {...form.register("next_increment_date")}
                                    disabled
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Nationality"
                                    id="nationality"
                                    placeholder="Nationality"
                                    icon={GlobeIcon}
                                    className='w-full'
                                    {...form.register("nationality")}
                                />
                            </FormControl>
                        </div>
                        {/* Row 5: blood_group, designation , hold percentage */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                            <div className="space-y-1">
                                <label htmlFor="blood_group" className="block text-sm font-medium">
                                    Blood Group
                                </label>
                                <Select
                                    value={form.watch("blood_group") ?? ""}
                                    onValueChange={(value) =>
                                        form.setValue("blood_group", value as IEmployeeValues["blood_group"], {
                                            shouldValidate: true,
                                        })
                                    }
                                >
                                    <SelectTrigger id="blood_group" className='w-full'>
                                        <SelectValue placeholder="Select blood group" />
                                    </SelectTrigger>
                                    <SelectContent>
                                        {bloodGroupList.map((bg) => (
                                            <SelectItem key={bg} value={bg}>
                                                {bg.toUpperCase()}
                                            </SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                            </div>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="designation"
                                    id="designation"
                                    type="text"
                                    placeholder="designation"
                                    className='w-full'
                                    {...form.register("designation")}
                                />
                            </FormControl>
                            <div className="space-y-1">
                                <label htmlFor="hold_percentage" className="block text-sm font-medium">
                                    Hold Percentage
                                </label>
                                <Select
                                    value={form.watch("hold_percentage")?.toString() ?? "none"}
                                    onValueChange={(value) => {
                                        const num = value === "none" ? 0 : parseInt(value, 10);
                                        form.setValue("hold_percentage", num, {
                                            shouldValidate: true,
                                        });
                                    }}
                                >
                                    <SelectTrigger id="hold_percentage" className='w-full'>
                                        <SelectValue placeholder="Select Hold Percentage" />
                                    </SelectTrigger>
                                    <SelectContent>
                                        <SelectItem value="none">Select Hold Percentage</SelectItem>
                                        {["30", "50", "100"].map((pct) => (
                                            <SelectItem key={pct} value={pct}>
                                                {pct} %
                                            </SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                            </div>
                        </div>
                        {/* Row 6: contributions */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                            {(contributionList).map((name) => (
                                <div
                                    key={name}
                                    className="flex items-center w-full bg-muted/30 rounded-md px-4 py-2"
                                >
                                    <label className="capitalize mr-auto text-sm font-medium">
                                        {name.split("_")[0].toUpperCase()} Contribution*
                                    </label>
                                    <Switch
                                        checked={form.watch(name) === 1}
                                        onCheckedChange={(checked) =>
                                            form.setValue(name, checked ? 1 : 0, { shouldValidate: true })
                                        }
                                    />
                                </div>
                            ))}
                        </div>
                    </CardContent>
                    <Separator className="bg-gray-300/50 my-4 !w-[80vw] max-w-[80vw] mx-auto" />

                    {/* Contact Details */}
                    <CardHeader>
                        <CardTitle className="text-xl">Contact Details</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-8 mt-4">
                        {/* Row 1: Residential Address, city, state, country, */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Residential Address"
                                    id="residential"
                                    placeholder="Residential Address"
                                    icon={MapPinIcon}
                                    className='w-full'
                                    {...form.register("residential")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="City"
                                    id="city"
                                    placeholder="City"
                                    icon={GlobeIcon}
                                    className='w-full'
                                    {...form.register("city")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="State"
                                    id="state"
                                    placeholder="State"
                                    icon={MapPinIcon}
                                    className='w-full'
                                    {...form.register("state")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Country"
                                    id="country"
                                    placeholder="Country"
                                    icon={GlobeIcon}
                                    className='w-full'
                                    {...form.register("country")}
                                />
                            </FormControl>
                        </div>
                        {/* Row 2:  pincode, contact_no ,home*/}
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">

                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Pincode"
                                    id="pincode"
                                    placeholder="Pincode"
                                    type="number"
                                    icon={MapPinIcon}
                                    className='w-full'
                                    {...form.register("pincode")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Contact Number"
                                    id="personal"
                                    placeholder="Contact Number"
                                    type="number"
                                    icon={PhoneIcon}
                                    className='w-full'
                                    {...form.register("personal")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Home Contact No"
                                    id="home"
                                    placeholder="Home Contact Number"
                                    type="number"
                                    icon={PhoneIcon}
                                    className='w-full'
                                    {...form.register("home")}
                                />
                            </FormControl>
                        </div>
                    </CardContent>
                    <Separator className="bg-gray-300/50 my-4 !w-[80vw] max-w-[80vw] mx-auto" />

                    {/* Bank Details */}
                    <CardHeader>
                        <CardTitle className="text-xl">Bank Details</CardTitle>

                    </CardHeader>
                    <CardContent className="space-y-8 mt-4">
                        {/* Row 1: bank_name, account_holder_name, account_no ,branch_name */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Bank Name"
                                    id="bank_name"
                                    placeholder="Bank Name"
                                    icon={GlobeIcon}
                                    className='w-full'
                                    {...form.register("bank_name")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Account Holder Name"
                                    id="account_holder_name"
                                    placeholder="Account Holder Name"
                                    icon={UserIcon}
                                    className='w-full'
                                    {...form.register("account_holder_name")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Account Number"
                                    id="account_no"
                                    placeholder="Account Number"
                                    type="number"
                                    icon={GlobeIcon}
                                    className='w-full'
                                    {...form.register("account_no")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Branch Name"
                                    id="branch_name"
                                    placeholder="Branch Name"
                                    icon={MapPinIcon}
                                    className='w-full'
                                    {...form.register("branch_name")}
                                />
                            </FormControl>
                        </div>
                        {/* Row 2: ifsc_code, account_type */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="IFSC Code"
                                    id="ifsc_code"
                                    placeholder="IFSC Code"
                                    icon={GlobeIcon}
                                    className='w-full'
                                    {...form.register("ifsc_code")}
                                />
                            </FormControl>
                            <div className="space-y-1">
                                <label htmlFor="account_type" className="block text-sm font-medium">
                                    Account Type
                                </label>
                                <Select
                                    value={form.watch("account_type")?.toString() ?? "none"}
                                    onValueChange={(value) => {
                                        const num = value === "none" ? "" : value;
                                        form.setValue("account_type", num, {
                                            shouldValidate: true,
                                        });
                                    }}
                                >
                                    <SelectTrigger id="hold_percentage" className='w-full'>
                                        <SelectValue placeholder="Select Account Type" />
                                    </SelectTrigger>
                                    <SelectContent>
                                        <SelectItem value="none">Select Hold Percentage</SelectItem>
                                        {accountType.map((pct) => (
                                            <SelectItem key={pct} value={pct}>
                                                {pct[0].toUpperCase() + pct.slice(1)}
                                            </SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                            </div>
                        </div>
                    </CardContent>
                    <Separator className="bg-gray-300/50 my-4 !w-[80vw] max-w-[80vw] mx-auto" />

                    {/* Document Details */}
                    <CardHeader>
                        <CardTitle className="text-xl">Document Details</CardTitle>

                    </CardHeader>
                    <CardContent className="space-y-8 mt-4">
                        {/* Row 1: aadhar_card, pan_card */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Aadhar Card Number"
                                    id="aadhar_card"
                                    placeholder="Aadhar Card Number"
                                    icon={GlobeIcon}
                                    {...form.register("aadhar_card")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="PAN Card Number"
                                    id="pan_card"
                                    placeholder="PAN Card Number"
                                    icon={UserIcon}
                                    {...form.register("pan_card")}
                                />
                            </FormControl>
                        </div>
                    </CardContent>
                    <Separator className="bg-gray-300/50 my-4 !w-[80vw] max-w-[80vw] mx-auto" />

                    {/* Education Details */}
                    <CardHeader>
                        <CardTitle className="text-xl">Education Details</CardTitle>

                    </CardHeader>
                    <CardContent className="space-y-8 mt-4">
                        {/* Row 1: degree, college_name, designation, start_month_year */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Degree"
                                    id="degree"
                                    placeholder="Degree"
                                    icon={GlobeIcon}
                                    className='w-full'
                                    {...form.register("degree")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="College/University"
                                    id="college_name"
                                    placeholder="College/University"
                                    icon={GlobeIcon}
                                    className='w-full'
                                    {...form.register("college_name")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Designation"
                                    id="designation"
                                    placeholder="Designation"
                                    icon={UserIcon}
                                    className='w-full'
                                    {...form.register("designation")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="Start Month/Year"
                                    id="start_month_year"
                                    type="month"
                                    icon={CalendarIcon}
                                    className='w-full'
                                    {...form.register("start_month_year")}
                                />
                            </FormControl>
                        </div>
                        {/* Row 2:  end_month_year */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="End Month/Year"
                                    id="end_month_year"
                                    type="month"
                                    icon={CalendarIcon}
                                    className='w-full'
                                    {...form.register("end_month_year")}
                                />
                            </FormControl>
                        </div>
                    </CardContent>
                    <Separator className="bg-gray-300/50 my-4 !w-[80vw] max-w-[80vw] mx-auto" />

                    {/* PF A/C, UAN & ESI Details */}
                    <CardHeader>
                        <CardTitle className="text-xl">PF A/C, UAN & ESI Details</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-8 mt-4">
                        {/* Row 1: pf_account_no, uan_no, esi_no */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="PF Account Number"
                                    id="pf_account_no"
                                    placeholder="PF Account Number"
                                    icon={GlobeIcon}
                                    className='w-full'
                                    {...form.register("pf_account_no")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="UAN Number"
                                    id="uan_no"
                                    placeholder="UAN Number"
                                    icon={GlobeIcon}
                                    className='w-full'
                                    {...form.register("uan_no")}
                                />
                            </FormControl>
                            <FormControl className="space-y-1">
                                <IconInput
                                    label="ESI Number"
                                    id="esi_no"
                                    placeholder="ESI Number"
                                    icon={GlobeIcon}
                                    className='w-full'
                                    {...form.register("esi_no")}
                                />
                            </FormControl>
                        </div>
                    </CardContent>
                    <Separator className="bg-gray-300/50 my-4 !w-[80vw] max-w-[80vw] mx-auto" />

                    <CardFooter className="flex justify-end space-x-2 mt-4 sticky bottom-10 z-50">
                        <Button type="button" variant="outline" onClick={() => router.back()}>
                            Cancel
                        </Button>
                        <Button type="submit" disabled={form.formState.isSubmitting}>
                            {form.formState.isSubmitting ? "Saving..." : "Save"}
                        </Button>
                    </CardFooter>
                </form>
            </Form>
        </Card>
    );
}