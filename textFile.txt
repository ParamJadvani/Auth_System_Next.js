/app/layout.tsx
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import { ToastContainer } from "react-toastify";
import "./globals.css";
import { fetchUserRepository } from "@/repository/user";
import InitializeUser from "@/components/Initialize/InitializeUser";

const geistSans = Geist({
    variable: "--font-geist-sans",
    subsets: ["latin"],
});

const geistMono = Geist_Mono({
    variable: "--font-geist-mono",
    subsets: ["latin"],
});

export const metadata: Metadata = {
    title: "Create Next App",
    description: "Generated by create next app",
};

export default async function RootLayout({
    children,
}: Readonly<{
    children: React.ReactNode;
}>) {
    const userData = await fetchUserRepository();
    return (
        <html lang="en">
            <body className={`${geistSans.variable} ${geistMono.variable} antialiased`} suppressHydrationWarning>
                <InitializeUser user={userData}>
                    {children}
                    <ToastContainer
                        position="top-center"
                        draggable={false}
                        pauseOnHover={false}
                        autoClose={2500}
                        closeButton={false}
                        hideProgressBar={true}
                        theme="colored"
                    />
                </InitializeUser>
            </body>
        </html>
    );
}

/components/Initialize/InitializeUser.ts
"use client";
import authStore from "@/store/authStore";
import { IUserStore } from "@/types/user";
import { useRef } from "react";

export default function InitializeUser({
    user,
    children,
}: {
    user: IUserStore;
    children: React.ReactNode;
}) {
    const ref = useRef(false);

    if (!ref.current) {
        authStore.setState({ user });
        ref.current = true;
    }

    return children;
}

/repository/user.ts
import API from "@/lib/axios";

export const fetchUserRepository = async () => {
    try {
        const res = await API.get("/auth/user");
        return res.data;
    } catch {}
};

/types/user.ts
export type IUser = {
    id: number;
    company_id: number | null;
    employee_id: number | null;
    firstname: string;
    middlename: string | null;
    lastname: string;
    email: string;
    status: "active" | "inactive" | string;
    file_size_limit: number;
    used_size: number;
    email_verified_at: string | null;
    remember_me_token: string | null;
    two_factor_secret: string | null;
    gender: "male" | "female" | string;
    marital_status: "married" | "unmarried" | string;
    blood_group: string | null;
    date_of_birth: string | null;
    nationality: string | null;
    is_admin: 0 | 1;
    is_super_admin: 0 | 1;
    date_of_joining: string | null;
    probation_end_date: string | null;
    salary_increment_date: string | null;
    salary_contract_period: string | null;
    next_increment_date: string | null;
    last_working_date: string | null;
    designation: string | null;
    pf_contribution: number;
    abry_contribution: number;
    esi_contribution: number;
    pf_account_no: string | null;
    esi_no: string | null;
    uan_no: string | null;
    aadhar_card: string | null;
    pan_card: string | null;
    address: string | null;
    bank_info: string | null;
    education_info: string | null;
    contact_no: string | null;
    hold_percentage: number | null;
    hold_paid_at: string | null;
    created_at: string;
    updated_at: string;
    deleted_at: string | null;
};

export type IUserCompany = {
    access: null;
    address: string;
    allowed_location_points: null;
    city: string;
    contact_no: string;
    country: string;
    created_at: string;
    deleted_at: null;
    designation: null;
    email: string;
    file_size_limit: number;
    id: number;
    is_job_running: number;
    location_range: number;
    logo: string;
    logo_url: string;
    name: string;
    pincode: number;
    settings: {
        basic: number;
        epf_admin: number;
        epf_edli: number;
        epf_employee: number;
        epf_employer: number;
        epf_employer_pention: number;
        esi_employee: number;
        esi_employer: number;
        friday: number;
        house_rent_allowance: number;
        leave_encashment: string;
        monday: number;
        salary_count: string;
        saturday: number;
        select_tax_regime: string;
        sunday: number;
        thursday: number;
        tuesday: number;
        wednesday: number;
    };
    state: string;
    status: number;
    updated_at: string;
    user_id: number;
};

export type IUserStore = {
    company: [IUserCompany] | [];
    user: IUser | null;
};

/store/authStore.ts
import { IUserStore } from "@/types/user";
import { create } from "zustand";

type authStore = {
    user: IUserStore | null;
    setUser: (user: IUserStore | null) => void;
};

const authStore = create<authStore>(() => ({
    user: null,
    setUser: (user: IUserStore | null) => {
        authStore.setState({ user });
    },
}));

export default authStore;

/app/(noauth)/layout.tsx
"use client";

import { useEffect } from "react";
import useAuth from "@/hooks/use-Auth";
import { HOME_PAGE } from '@/constants/redirect';
import { useRouter } from 'next/navigation';

export default function NoAuthLayout({ children }: { children: React.ReactNode }) {
    const { isLoggedIn } = useAuth();
    const router = useRouter()

    useEffect(() => {
        if (isLoggedIn) {
            router.replace(HOME_PAGE);
        }
    }, [isLoggedIn, router]);

    if (isLoggedIn) {
        return null;
    }

    return <div>{children}</div>;
}

/hooks/use-Auth.ts
"use client";

import API from "@/lib/axios";
import {
    IChangePasswordValues,
    ILoginValues,
    IRegisterValues,
    IResetPasswordValues,
} from "@/types/auth";
import { removeToken, setToken } from "@/lib/cookies";
import authStore from "@/store/authStore";
import { IUser } from "@/types/user";
import { HOME_PAGE, LOGIN_PAGE } from "@/constants/redirect";
import { useRouter } from "next/navigation";

export default function useAuth() {
    const setUserInStore = authStore.getState().setUser;
    const router = useRouter();

    const register = async (data: IRegisterValues): Promise<void> => {
        try {
            await API.post("/auth/register", data);
            login(data);
        } catch {}
    };

    const login = async (data?: ILoginValues, url: string = "/auth/login"): Promise<void> => {
        try {
            const res = await API.post(url, data);
            await setToken("auth_token", res.data.token);
            await fetchUser();
            router.push(HOME_PAGE);
        } catch {}
    };

    const fetchUser = async (): Promise<IUser | null> => {
        try {
            const res = await API.get("/auth/user");
            setUserInStore(res.data);
            return res.data.user;
        } catch {
            return null;
        }
    };

    const logout = async (): Promise<void> => {
        try {
            await API.post("/auth/logout");
            await removeToken("auth_token");
            authStore.setState({ user: null });
            router.push(LOGIN_PAGE);
        } catch {}
    };

    const resendEmailVerification = async (): Promise<void> => {
        try {
            await API.request({
                method: "POST",
                url: "/auth/email/verify/resend",
            });
        } catch {}
    };

    const verifyEmail = async (url: string): Promise<void> => {
        try {
            await API.get(url);
            router.push(HOME_PAGE);
        } catch {}
    };

    const forgotPassword = async (data: ILoginValues): Promise<void> => {
        try {
            await API.post("/auth/password/forgot", data);
            router.push(LOGIN_PAGE);
        } catch {}
    };

    const resetPassword = async (data: IResetPasswordValues, url: string): Promise<void> => {
        try {
            await API.post(url, data);
            router.push(LOGIN_PAGE);
        } catch {}
    };

    const changePassword = async (data: IChangePasswordValues): Promise<boolean> => {
        try {
            await API.post("/auth/change-password", data);
            return false;
        } catch {
            return true;
        }
    };

    return {
        register,
        login,
        fetchUser,
        logout,
        verifyEmail,
        forgotPassword,
        resetPassword,
        changePassword,
        resendEmailVerification,
        isLoggedIn: Boolean(authStore.getState().user),
    };
}

/types/auth.ts
export interface IRegisterValues {
    firstname: string;
    lastname: string;
    email: string;
    password: string;
    password_confirmation: string;
}

export interface ILoginValues {
    email: string;
    password: string;
}

export interface IResetPasswordValues {
    password: string;
    password_confirmation: string;
}

export interface IChangePasswordValues {
    current_password: string;
    new_password: string;
    new_password_confirmation: string;
}

/lib/axios.ts
import { onRequest, onResponse, onResponseError } from "@/utils/apiInterception";
import axios from "axios";

const API = axios.create({
    baseURL: "https://adonis-payroll.s.arrangic.com",
    withCredentials: true,
    headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
    },
});

API.interceptors.request.use(onRequest);
API.interceptors.response.use(onResponse, onResponseError);

export default API;

/app/(noauth)/register/page.tsx
"use client";
import { Loader2 } from "lucide-react";
import { useForm } from "react-hook-form";
import { FormControl } from "@/components/ui/form";
import { Form } from "@/components/ui/form";
import { Button } from "@/components/ui/button";
import { IconInput } from "@/components/ui/iconInput";
import {
    Card,
    CardContent,
    CardDescription,
    CardFooter,
    CardHeader,
    CardTitle,
} from "@/components/ui/card";
import Link from "next/link";
import useAuth from "@/hooks/use-Auth";
import { LOGIN_PAGE } from "@/constants/redirect";
import { IRegisterValues } from '@/types/auth';

export default function RegisterPage() {
    const form = useForm<IRegisterValues>({
        defaultValues: {
            firstname: "",
            lastname: "",
            email: "",
            password: "",
            password_confirmation: "",
        },
    });
    const { isLoading } = form.formState;
    const { register: registerAction } = useAuth();

    const onSubmit = async (data: IRegisterValues) => {
        await registerAction(data);
    };
    return (
        <div className="min-h-screen flex items-center justify-center bg-gray-100">
            <Card className="w-full max-w-md">
                <CardHeader>
                    <CardTitle>Register</CardTitle>
                    <CardDescription>Create your account</CardDescription>
                </CardHeader>
                <Form {...form}>
                    <form onSubmit={form.handleSubmit(onSubmit)}>
                        <CardContent className="space-y-4">
                            <div className="grid grid-cols-2 gap-4">
                                <FormControl>
                                    <IconInput
                                        id="firstname"
                                        label="First Name"
                                        {...form.register("firstname")}
                                    />
                                </FormControl>

                                <FormControl>
                                    <IconInput
                                        id="lastname"
                                        label="Last Name"
                                        {...form.register("lastname")}
                                    />
                                </FormControl>
                            </div>
                            <FormControl>
                                <IconInput
                                    id="email"
                                    label="Email Address"
                                    type="email"
                                    {...form.register("email")}
                                />
                            </FormControl>

                            <FormControl>
                                <IconInput
                                    id="password"
                                    label="Password"
                                    type="password"
                                    {...form.register("password")}
                                />
                            </FormControl>

                            <FormControl>
                                <IconInput
                                    id="password_confirmation"
                                    label="Confirm Password"
                                    type="password"
                                    {...form.register("password_confirmation")}
                                />
                            </FormControl>
                        </CardContent>
                        <CardFooter className="flex flex-col space-y-4 mt-5">
                            <Button type="submit" className="w-full" disabled={isLoading}>
                                {isLoading ? (
                                    <>
                                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                        Processing...
                                    </>
                                ) : (
                                    "Register"
                                )}
                            </Button>
                            <p className="text-sm text-center text-muted-foreground">
                                Already have an account?{" "}
                                <Link
                                    href={LOGIN_PAGE}
                                    className="text-primary hover:underline"
                                >
                                    Login
                                </Link>
                            </p>
                        </CardFooter>
                    </form>
                </Form>
            </Card>
        </div>
    );
}

/app/(noauth)/login/_LoginForm.tsx
"use client";
import { Loader2 } from "lucide-react";
import { useForm } from "react-hook-form";
import { FormControl } from "@/components/ui/form";
import { Form } from "@/components/ui/form";
import { Button } from "@/components/ui/button";
import { IconInput } from "@/components/ui/iconInput";
import {
    Card,
    CardContent,
    CardDescription,
    CardFooter,
    CardHeader,
    CardTitle,
} from "@/components/ui/card";
import Link from "next/link";
import useAuth from "@/hooks/use-Auth";
import { FORGOT_PASSWORD_PAGE, REGISTER_PAGE } from "@/constants/redirect";
import { ILoginValues } from '@/types/auth';
import { useSearchParams } from 'next/navigation';
import {  useEffect } from 'react';

export default function LoginForm() {
    const searchParams = useSearchParams();
    const token = searchParams.get("token");
    const form = useForm<ILoginValues>({
        defaultValues: {
            email: "",
            password: "",
        },
    });
    const { isLoading } = form.formState;
    const { login: loginAction } = useAuth();

    const onSubmit = async (data: ILoginValues) => {
        await loginAction(data);
    };

    useEffect(() => {
        if (!token) return;
        (async () => {
            await loginAction(undefined, token);
        })();
    }, [token]);

    return (
            <div className="min-h-screen flex items-center justify-center bg-gray-100">
                <Card className="w-full max-w-md">
                    <CardHeader>
                        <CardTitle>Login</CardTitle>
                        <CardDescription>Sign in to your account</CardDescription>
                    </CardHeader>
                    <Form {...form}>
                        <form onSubmit={form.handleSubmit(onSubmit)}>
                            <CardContent className="space-y-4">
                                <FormControl>
                                    <IconInput
                                        id="email"
                                        label="Email Address"
                                        type="email"
                                        {...form.register("email")}
                                    />
                                </FormControl>

                                <FormControl>
                                    <IconInput
                                        id="password"
                                        label="Password"
                                        type="password"
                                        {...form.register("password")}
                                    />
                                </FormControl>
                            </CardContent>
                            <CardFooter className="flex flex-col gap-4 mt-6">
                                {/* Forgot Password */}
                                <div className="w-full text-sm text-end">
                                    <Link
                                        href={FORGOT_PASSWORD_PAGE}
                                        className="text-blue-700 font-normal hover:underline"
                                    >
                                        Forgot Password?
                                    </Link>
                                </div>

                                {/* Login Button */}
                                <Button type="submit" className="w-full h-10 text-sm" disabled={isLoading}>
                                    {isLoading ? (
                                        <>
                                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                            Processing...
                                        </>
                                    ) : (
                                        "Login"
                                    )}
                                </Button>

                                {/* Register Link */}
                                <div className="w-full text-sm text-center text-muted-foreground">
                                    Don&apos;t have an account?{" "}
                                    <Link
                                        href={REGISTER_PAGE}
                                        className="text-primary font-medium hover:underline"
                                    >
                                        Register
                                    </Link>
                                </div>
                            </CardFooter>
                        </form>
                    </Form>
                </Card>
            </div>
    );
}

/app/(noAuth)/login/page.tsx
"use client";
import LoginForm from '@/app/(noAuth)/login/_LoginForm';
import { Suspense } from 'react';

export default function LoginPage() {
    return (
        <Suspense fallback={<div className="min-h-screen flex items-center justify-center bg-gray-100">Loading...</div>}>
            <LoginForm />
        </Suspense>
    )
}

/components/ui/iconInput.tsx
// components/ui/iconInput.tsx
"use client";

import React, { forwardRef, useMemo, useState } from "react";
import { Eye, EyeOff, LucideIcon } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { FormMessage } from "@/components/ui/form";

interface IconInputProps extends React.InputHTMLAttributes<HTMLInputElement> {
    id: string;
    label: string;
    icon?: LucideIcon;
    error?: string;
}

export const IconInput = forwardRef<HTMLInputElement, IconInputProps>(
    (
        { id, label, icon: Icon, type = "text", error, className = "", ...props },
        ref
    ) => {
        const [showPassword, setShowPassword] = useState(false);
        const isPassword = type === "password";
        const inputType = isPassword && showPassword ? "text" : type;

        const iconElement = useMemo(
            () =>
                Icon ? <Icon size={18} className="text-muted-foreground absolute left-3 top-1/2 -translate-y-1/2" /> : null,
            [Icon]
        );

        return (
            <div className="space-y-2">
                <Label htmlFor={id}>{label}</Label>
                <div className="relative">
                    {iconElement}
                    {/* 3️⃣ Attach the forwarded ref here */}
                    <Input
                        id={id}
                        type={inputType}
                        ref={ref}
                        className={`
                            ${Icon ? "pl-10" : ""}
                            ${isPassword ? "pr-10" : ""}
                            ${error ? "border-destructive" : "focus:border-primary"}
                            ${className}
                          `}
                        {...props}
                        aria-invalid={!!error}
                    />
                    {isPassword && (
                        <Button
                            type="button"
                            variant="ghost"
                            size="icon"
                            className="absolute right-1 top-1/2 -translate-y-1/2 h-7 w-7"
                            onClick={() => setShowPassword(!showPassword)}
                            aria-label={showPassword ? "Hide password" : "Show password"}
                        >
                            {showPassword ? (
                                <EyeOff className="h-4 w-4" />
                            ) : (
                                <Eye className="h-4 w-4" />
                            )}
                        </Button>
                    )}
                </div>
                {error && <FormMessage>{error}</FormMessage>}
            </div>
        );
    }
);

IconInput.displayName = "IconInput";

/app/(noauth)/forgot-password/page.tsx
"use client";
import { Loader2 } from "lucide-react";
import { useForm } from "react-hook-form";
import { FormControl } from "@/components/ui/form";
import { Form } from "@/components/ui/form";
import { Button } from "@/components/ui/button";
import { IconInput } from "@/components/ui/iconInput";
import {
    Card,
    CardContent,
    CardFooter,
    CardHeader,
    CardTitle,
} from "@/components/ui/card";
import Link from "next/link";
import useAuth from "@/hooks/use-Auth";
import { LOGIN_PAGE } from "@/constants/redirect";
import { ILoginValues } from '@/types/auth';

export default function ForgotPasswordPage() {
    const form = useForm<ILoginValues>({
        defaultValues: {
            email: "",
            password: "",
        },
    });
    const { errors, isLoading } = form.formState;
    const { forgotPassword } = useAuth();

    const onSubmit = async (data: ILoginValues) => {
        await forgotPassword(data);
        form.reset();
    };
    return (
        <div className="min-h-screen flex items-center justify-center bg-gray-100">
            <Card className="w-full max-w-md">
                <CardHeader>
                    <CardTitle>Forgot Password</CardTitle>
                </CardHeader>
                <Form {...form}>
                    <form onSubmit={form.handleSubmit(onSubmit)}>
                        <CardContent className="space-y-4">
                            <FormControl>
                                <IconInput
                                    id="email"
                                    label="Email Address"
                                    type="email"
                                    placeholder='Enter your email'
                                    {...form.register("email")}
                                    error={errors.email?.message}
                                />
                            </FormControl>
                        </CardContent>
                        <CardFooter className="flex flex-col space-y-4 mt-5">
                            <Button type="submit" className="w-full" disabled={isLoading}>
                                {isLoading ? (
                                    <>
                                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                        Processing...
                                    </>
                                ) : (
                                    "Forgot Password"
                                )}
                            </Button>
                            <p className="text-sm text-center text-muted-foreground">
                                <Link
                                    href={LOGIN_PAGE}
                                    className="text-primary hover:underline"
                                >
                                    Login
                                </Link>
                            </p>
                        </CardFooter>
                    </form>
                </Form>
            </Card>
        </div>
    );
}

/app/(noauth)/password/reset/_passwordResetPage.tsx
"use client";
import { Loader2 } from "lucide-react";
import { useForm } from "react-hook-form";
import { FormControl } from "@/components/ui/form";
import { Form } from "@/components/ui/form";
import { Button } from "@/components/ui/button";
import { IconInput } from "@/components/ui/iconInput";
import {
    Card,
    CardContent,
    CardFooter,
    CardHeader,
    CardTitle,
} from "@/components/ui/card";
import Link from "next/link";
import useAuth from "@/hooks/use-Auth";
import { LOGIN_PAGE } from "@/constants/redirect";
import { useSearchParams } from 'next/navigation';
import { useEffect } from 'react';
import { IResetPasswordValues } from '@/types/auth';
import { useRouter } from 'next/router';


export default function PasswordResetComponent() {
    const form = useForm<IResetPasswordValues>({
        defaultValues: {
            password: "",
            password_confirmation: "",
        },
    });
    const { isLoading } = form.formState;
    const { resetPassword } = useAuth();
    const searchParams = useSearchParams();
    const url = searchParams.get("token");
    const router = useRouter();

    const onSubmit = async (data: IResetPasswordValues) => {
        if (url) {
            await resetPassword(data, url);
            form.reset();
        }
    };

    useEffect(() => {
        if (!url) {
            router.push(LOGIN_PAGE);
        }
    }, [url, router]);
    return (
        <div className="min-h-screen flex items-center justify-center bg-gray-100">
            <Card className="w-full max-w-md">
                <CardHeader>
                    <CardTitle>Forgot Password</CardTitle>
                </CardHeader>
                <Form {...form}>
                    <form onSubmit={form.handleSubmit(onSubmit)}>
                        <CardContent className="space-y-4">
                            <FormControl>
                                <IconInput
                                    id="password"
                                    label="Password"
                                    type="password"
                                    {...form.register("password")}
                                />
                            </FormControl>

                            <FormControl>
                                <IconInput
                                    id="password_confirmation"
                                    label="Confirm Password"
                                    type="password"
                                    {...form.register("password_confirmation")}
                                />
                            </FormControl>
                        </CardContent>
                        <CardFooter className="flex flex-col space-y-4 mt-5">
                            <Button type="submit" className="w-full" disabled={isLoading}>
                                {isLoading ? (
                                    <>
                                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                        Processing...
                                    </>
                                ) : (
                                    "Forgot Password"
                                )}
                            </Button>
                            <p className="text-sm text-center text-muted-foreground">

                                <Link
                                    href={LOGIN_PAGE}
                                    className="text-primary hover:underline"
                                >
                                    Login
                                </Link>
                            </p>
                        </CardFooter>
                    </form>
                </Form>
            </Card>
        </div>
    );
}

/app/(noAuth)/password/reset/page.tsx
import PasswordResetComponent from '@/app/(noAuth)/password/reset/_passwordResetPage';
import { Loader2 } from 'lucide-react';
import { Suspense } from 'react';

export default function PasswordResetPage() {
    return (
        <Suspense fallback={<div className="min-h-screen flex items-center justify-center bg-gray-100">
            <div className="w-full max-w-md">
                <div className="flex flex-col items-center space-y-4">
                    <Loader2 className="h-8 w-8 animate-spin text-primary" />
                    <p className="text-sm text-muted-foreground">Loading...</p>
                </div>
            </div>
        </div>}>
            <PasswordResetComponent />
        </ Suspense>
    )
}